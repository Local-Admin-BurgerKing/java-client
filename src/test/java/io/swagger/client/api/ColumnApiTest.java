/*
 * rest-api
 * An api to fetch manipulate and enter data to the Local Admin service. All Responses can be done with JSON and XML where JSON is the default. You can change the response by setting the content-type header. The downside of our XML is that we do not provide XLS for the Responses
 *
 * OpenAPI spec version: 1.1.0
 * Contact: nbrugger@student.tgm.ac.at
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.Column;
import io.swagger.client.model.Column1;
import io.swagger.client.model.Column2;
import io.swagger.client.model.Columnoptional;
import io.swagger.client.model.ErrorResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ColumnApi
 */
@Ignore
public class ColumnApiTest {

    private final ColumnApi api = new ColumnApi();

    /**
     * Add Column
     *
     * Adds a new column to the column list
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addColumnTest() throws ApiException {
        Column body = null;
        api.addColumn(body);

        // TODO: test validations
    }
    /**
     * Delete Column
     *
     * Deletes an existing column
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteColumnTest() throws ApiException {
        String name = null;
        api.deleteColumn(name);

        // TODO: test validations
    }
    /**
     * Delete All Columns
     *
     * Deletes all saved information about the columns
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteColumnsTest() throws ApiException {
        api.deleteColumns();

        // TODO: test validations
    }
    /**
     * Edit Column
     *
     * Edit specific values of a column
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void editColumnTest() throws ApiException {
        String name = null;
        Columnoptional body = null;
        api.editColumn(name, body);

        // TODO: test validations
    }
    /**
     * Get All Columns
     *
     * Get all columns
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllColumnsTest() throws ApiException {
        Boolean wholeData = null;
        List<Object> response = api.getAllColumns(wholeData);

        // TODO: test validations
    }
    /**
     * Get Column Data
     *
     * Gets the column by the sended name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getColumnTest() throws ApiException {
        String name = null;
        Column1 response = api.getColumn(name);

        // TODO: test validations
    }
    /**
     * Replace Column
     *
     * Replaces an already existing column by a new one
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceColumnTest() throws ApiException {
        String name = null;
        Column2 body = null;
        api.replaceColumn(name, body);

        // TODO: test validations
    }
}
