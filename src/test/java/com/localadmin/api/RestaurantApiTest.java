/*
 * rest-api
 * An api to fetch manipulate and enter data to the Local Admin service. All Responses can be done with JSON and XML where JSON is the default. You can change the response by setting the content-type header. The downside of our XML is that we do not provide XLS for the Responses
 *
 * OpenAPI spec version: 1.1.0
 * Contact: nbrugger@student.tgm.ac.at
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.localadmin.api;

import com.localadmin.ApiException;
import com.localadmin.model.ErrorResponse;
import com.localadmin.model.Restaurant;
import com.localadmin.model.Restaurant1;
import com.localadmin.model.Restaurant2;
import com.localadmin.model.Restaurantoptional;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RestaurantApi
 */
@Ignore
public class RestaurantApiTest {

    private final RestaurantApi api = new RestaurantApi();

    /**
     * Add Employee
     *
     * Adds a new user to the restaurant
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addEmployeeTest() throws ApiException {
        Integer number = null;
        String body = null;
        api.addEmployee(number, body);

        // TODO: test validations
    }
    /**
     * Add Restaurant
     *
     * Adds a new restaurant to the Restaurant list
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addRestaurantTest() throws ApiException {
        Restaurant body = null;
        api.addRestaurant(body);

        // TODO: test validations
    }
    /**
     * Delete All Restaurants
     *
     * Deletes all saved information about all restaurants
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAllRestaurantsTest() throws ApiException {
        api.deleteAllRestaurants();

        // TODO: test validations
    }
    /**
     * Delete Restaurant
     *
     * Deletes an existing restaurant
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRestaurantTest() throws ApiException {
        Integer number = null;
        api.deleteRestaurant(number);

        // TODO: test validations
    }
    /**
     * Edit Restaurant
     *
     * Edit specific columns of a restaurant
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void editRestaurantTest() throws ApiException {
        Integer number = null;
        Restaurantoptional body = null;
        Restaurant2 response = api.editRestaurant(number, body);

        // TODO: test validations
    }
    /**
     * Get All Employees
     *
     * Get all users from a restaurant
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllEmployeesTest() throws ApiException {
        Integer number = null;
        List<String> response = api.getAllEmployees(number);

        // TODO: test validations
    }
    /**
     * Get All Restaurants
     *
     * Get all restaurants
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllRestaurantsTest() throws ApiException {
        Boolean wholeData = null;
        List<Object> response = api.getAllRestaurants(wholeData);

        // TODO: test validations
    }
    /**
     * Get Restaurant
     *
     * Gets the restaurant by the sended ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRestaurantTest() throws ApiException {
        Integer number = null;
        Boolean wholeData = null;
        Object response = api.getRestaurant(number, wholeData);

        // TODO: test validations
    }
    /**
     * Remove All Employees
     *
     * Remove all users from the restaurant so there are no employees anymore
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeAllEmployeesTest() throws ApiException {
        Integer number = null;
        api.removeAllEmployees(number);

        // TODO: test validations
    }
    /**
     * Remove Employee
     *
     * Removes an user from the restaurant so its no employee there anymore
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeEmployeeTest() throws ApiException {
        Integer number = null;
        String email = null;
        api.removeEmployee(number, email);

        // TODO: test validations
    }
    /**
     * Replace Restaurant
     *
     * Replaces an already existing restaurant by a new one
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceRestaurantTest() throws ApiException {
        Integer number = null;
        Restaurant1 body = null;
        api.replaceRestaurant(number, body);

        // TODO: test validations
    }
}
