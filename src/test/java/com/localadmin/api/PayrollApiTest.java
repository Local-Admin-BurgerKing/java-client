/*
 * rest-api
 * An api to fetch manipulate and enter data to the Local Admin service. All Responses can be done with JSON and XML where JSON is the default. You can change the response by setting the content-type header. The downside of our XML is that we do not provide XLS for the Responses
 *
 * OpenAPI spec version: 1.1.0
 * Contact: nbrugger@student.tgm.ac.at
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.localadmin.api;

import com.localadmin.ApiException;
import java.time.LocalDate;
import com.localadmin.model.Paths1authgetresponses401contentapplication1jsonschema;
import com.localadmin.model.Paths1payroll17Brestaurant7D1changes17Bdate7Dgetresponses200contentapplication1jsonschemaitems;
import com.localadmin.model.Paths1restaurantsgetresponses401contentapplication1jsonschema;
import com.localadmin.model.Paths1salaryLevel17Bname7D1payroll17Brestaurant7D1change1latestgetresponses200contentapplication1jsonschemaallOf0;
import com.localadmin.model.SalaryInformation;
import com.localadmin.model.SalaryLevel;
import com.localadmin.model.TimeFilter;
import com.localadmin.model.TimeFilter1;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PayrollApi
 */
@Ignore
public class PayrollApiTest {

    private final PayrollApi api = new PayrollApi();

    /**
     * Add Salary Level Change
     *
     * Records a salary level Change
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addSalaryChangeTest() throws ApiException {
        String name = null;
        Integer restaurant = null;
        api.addSalaryChange(name, restaurant);

        // TODO: test validations
    }
    /**
     * Add Salary Level
     *
     * Adds a new Salary level
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addSalaryLevelTest() throws ApiException {
        String name = null;
        api.addSalaryLevel(name);

        // TODO: test validations
    }
    /**
     * Delete Payroll
     *
     * Deletes the whole payroll
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePayrollTest() throws ApiException {
        api.deletePayroll();

        // TODO: test validations
    }
    /**
     * Delete Restaurant Changes
     *
     * Delete all changes for this restaurant
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRestaurantChangesTest() throws ApiException {
        Integer restaurant = null;
        api.deleteRestaurantChanges(restaurant);

        // TODO: test validations
    }
    /**
     * Edit Change Value
     *
     * Edit the change value
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void editChangeTest() throws ApiException {
        String name = null;
        Integer restaurant = null;
        LocalDate date = null;
        Integer newValue = null;
        api.editChange(name, restaurant, date, newValue);

        // TODO: test validations
    }
    /**
     * Get Changes For Date
     *
     * The changes for all restaurants on this date
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getChangesByLevelAndDateTest() throws ApiException {
        String salaryLevel = null;
        LocalDate changeDate = null;
        Boolean includeEmpty = null;
        List<List<Object>> response = api.getChangesByLevelAndDate(salaryLevel, changeDate, includeEmpty);

        // TODO: test validations
    }
    /**
     * Get Latest Salary Change
     *
     * get the latest column
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLatestChangeTest() throws ApiException {
        String name = null;
        Integer restaurant = null;
        Object response = api.getLatestChange(name, restaurant);

        // TODO: test validations
    }
    /**
     * Get Payroll
     *
     * Returns all salary level changes at this salary level and resaurant
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPayrollTest() throws ApiException {
        String name = null;
        Integer restaurant = null;
        List<Paths1salaryLevel17Bname7D1payroll17Brestaurant7D1change1latestgetresponses200contentapplication1jsonschemaallOf0> response = api.getPayroll(name, restaurant);

        // TODO: test validations
    }
    /**
     * Payroll Information
     *
     * Get some usefull information about the payroll of this restaurant
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPayrollInformationTest() throws ApiException {
        String name = null;
        Integer restaurant = null;
        SalaryInformation response = api.getPayrollInformation(name, restaurant);

        // TODO: test validations
    }
    /**
     * Get Changes For Restaurant At Date
     *
     * All salary changes at a certain date for a restaurant 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRestaurantChangesAtDateTest() throws ApiException {
        LocalDate restaurant = null;
        LocalDate date = null;
        List<Object> response = api.getRestaurantChangesAtDate(restaurant, date);

        // TODO: test validations
    }
    /**
     * Get Changes For Restaurant
     *
     * Get all changes for the restaurant 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRestaurantChanges_Test() throws ApiException {
        Integer restaurant = null;
        TimeFilter body = null;
        List<Paths1payroll17Brestaurant7D1changes17Bdate7Dgetresponses200contentapplication1jsonschemaitems> response = api.getRestaurantChanges_(restaurant, body);

        // TODO: test validations
    }
    /**
     * Get Salary Level Change
     *
     * Get the salary change of a restaurant on a certain date
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSalaryChangeTest() throws ApiException {
        String name = null;
        Integer restaurant = null;
        LocalDate date = null;
        Boolean actualUse = null;
        Paths1salaryLevel17Bname7D1payroll17Brestaurant7D1change1latestgetresponses200contentapplication1jsonschemaallOf0 response = api.getSalaryChange(name, restaurant, date, actualUse);

        // TODO: test validations
    }
    /**
     * Get Salary Level
     *
     * Returns a specific salary level  &gt; the &#x60;whole_data&#x60; flag is missing  as salary level has no *primitive* attributes other than **name**
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSalaryLevelTest() throws ApiException {
        String salaryLevel = null;
        SalaryLevel response = api.getSalaryLevel(salaryLevel);

        // TODO: test validations
    }
    /**
     * Get Salary Level Changes
     *
     * All changes of the salary level **across all restaurants!**
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSalaryLevelChangesTest() throws ApiException {
        String salaryLevel = null;
        TimeFilter1 body = null;
        Boolean wholeData = null;
        List<Object> response = api.getSalaryLevelChanges(salaryLevel, body, wholeData);

        // TODO: test validations
    }
    /**
     * GET salary levels
     *
     * lists all salary levels
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSalaryLevelsTest() throws ApiException {
        Boolean wholeData = null;
        List<Object> response = api.getSalaryLevels(wholeData);

        // TODO: test validations
    }
    /**
     * Delete Change
     *
     * Removes the change
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeChangeTest() throws ApiException {
        String name = null;
        Integer restaurant = null;
        LocalDate date = null;
        api.removeChange(name, restaurant, date);

        // TODO: test validations
    }
    /**
     * Delete Payroll
     *
     * Deletes all changes for this restaurant
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removePayrollTest() throws ApiException {
        String name = null;
        Integer restaurant = null;
        api.removePayroll(name, restaurant);

        // TODO: test validations
    }
    /**
     * Delete Salary Level
     *
     * Removes a salary level and all of its changes
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeSalaryLevelTest() throws ApiException {
        String salaryLevel = null;
        api.removeSalaryLevel(salaryLevel);

        // TODO: test validations
    }
    /**
     * Rename Salary Level
     *
     * Edit Salary level name  Also changes all references.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void renameSalaryLevelTest() throws ApiException {
        String salaryLevel = null;
        String newName = null;
        api.renameSalaryLevel(salaryLevel, newName);

        // TODO: test validations
    }
    /**
     * Reset Salary Level
     *
     * Removes all changes (*from all restaurants*) from the salary level
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resetSalaryLevelTest() throws ApiException {
        String salaryLevel = null;
        api.resetSalaryLevel(salaryLevel);

        // TODO: test validations
    }
}
