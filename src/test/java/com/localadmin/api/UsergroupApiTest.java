/*
 * rest-api
 * An api to fetch manipulate and enter data to the Local Admin service. All Responses can be done with JSON and XML where JSON is the default. You can change the response by setting the content-type header. The downside of our XML is that we do not provide XLS for the Responses
 *
 * OpenAPI spec version: 1.1.0
 * Contact: nbrugger@student.tgm.ac.at
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.localadmin.api;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import java.util.ArrayList;
import java.util.List;

import org.junit.Before;
import org.junit.Test;

import com.google.gson.internal.LinkedTreeMap;
import com.localadmin.ApiClient;
import com.localadmin.ApiException;
import com.localadmin.Configuration;
import com.localadmin.auth.ApiKeyAuth;
import com.localadmin.model.Apikeywrapper;
import com.localadmin.model.Group;
import com.localadmin.model.Permission;

/**
 * API tests for UsergroupApi
 */

public class UsergroupApiTest {

	private final UsergroupApi api = new UsergroupApi();
	private final UserApi userApi = new UserApi();
	private final PermissionsApi permissionsApi = new PermissionsApi();
	private ApiKeyAuth User_Auth;
	private String key;
	private boolean resetGroupTableBefore = false; // should it clear the table for each Test so if one fails the
													// others does not fail

	@Before
	public void setup() {
		ApiClient defaultClient = Configuration.getDefaultApiClient();

		UsersApi usersApi = new UsersApi();
		try {
			Apikeywrapper wrapper = usersApi.authenticate("admin@kingrestaurants.at", "12345678");
			key = wrapper.getKey();
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			fail("Login failed from Admin");
		}

		// Configure API key authorization: User_Auth
		User_Auth = (ApiKeyAuth) defaultClient.getAuthentication("User_Auth");
		User_Auth.setApiKey(key);

		if (resetGroupTableBefore) {
			try {
				List<Object> groups = api.getAllGroups(false);
				for (int i = 0; i < groups.size(); i++) {
					if (!groups.get(i).equals("ROOT"))
						api.removeGroup(groups.get(i).toString());
				}
			} catch (ApiException e) {
				System.err.println(e.getResponseBody());
				fail("Fail when reseting group table!");
			}
		}

	}

	/**
	 * Create Group Get Group Edit Group Delete Group
	 *
	 * Tests 4 operations from Group
	 *
	 * @throws ApiException if the Api call fails
	 */
	@Test
	public void groupCreateEditGetDeleteTest() throws ApiException {
		List<Permission> permissions = new ArrayList<Permission>();

		Group group = new Group();
		group.setName("Admin");
		group.setPermissions(permissionsApi.getAllPermissions());

		// Create group
		try {
			api.createGroup(group);
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			fail("Error when creating group: " + e.getCode());
		}

		// Did it realy get added ?
		try {
			boolean found = false;
			List<Object> groupNames = api.getAllGroups(false);
			for(Object curr_group : groupNames) {
				LinkedTreeMap<String, Object> cgroup = (LinkedTreeMap<String, Object>) curr_group;
				if(((String) cgroup.get("name")).equals(group.getName())) {
					found = true;
					break;
				}
			}
			assertEquals("Group was not found, might be not added.", true, found);
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			fail("Error when getting groups: " + e.getCode());
		}

		// Edit group name
		try {
			api.updateGroupName(group.getName(), "Supporter");
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			fail("Error when updating group name: " + e.getCode());
		}

		// Test if group has been updated
		try {
			List<Object> groupNames = api.getAllGroups(false);
			if (!groupNames.contains("Supporter")) {
				fail("Group name does seem to not have been updated");
			}
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			fail("Error when getting groups: " + e.getCode());
		}

		// Test delete
		try {
			api.removeGroup("Admin");
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			fail("Error when deleting group: " + e.getCode());
		}
	}

	/**
	 * Add / Remove / Get group permission
	 *
	 * Tests the permission methods
	 *
	 * @throws ApiException if the Api call fails
	 */
	@Test
	public void groupAddRemoveGetPermissionTest() throws ApiException {
		// Wrong
		List<Permission> permissions = new ArrayList<Permission>();
		String permissionName = permissionsApi.getAllPermissions().get(0).getName();
		Group group = new Group();
		group.setName("Personal");
		group.setPermissions(permissions);

		/*
		 * Korret: List<Object> permissionsObjectList =
		 * permissionsApi.getAllPermissions(false); List<String> permissions =
		 * permissionsObjectList.stream().map(object -> Objects.toString(object,
		 * null)).collect(Collectors.toList()); Group group = new Group();
		 * group.setName("Personal"); group.setPermissions(permissions);
		 * 
		 */

		try {
			api.createGroup(group);
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			fail("Error when creating group: " + e.getCode());
		}

		// Add group again. Should throw error
		try {
			api.createGroup(group);
			fail("Group got added again which should not be!");
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			assertEquals("Error should be 409 if same group gets added 2 times", 409, e.getCode());
		}

		// Add permission to the group
		try {
			api.addGroupPermission(group.getName(), permissionName);
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			fail("Error when adding permission: " + e.getCode());
		}

		// Add permission to the group again and test if it gives an error that they are
		// already in the group
		try {
			api.addGroupPermission(group.getName(), permissionName);
			fail("Added permission again even tough it was already inside");
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			assertEquals("Error should be 409 because there was already the same permission in this group!" + 409,
					409, e.getCode());
		}

		// Tests if group has got the permission
		try {
			List<Permission> permissionsFromGroup = api.getGroupPermissions(group.getName());
			for (int i = 0; i < permissionsFromGroup.size(); i++) {
				if (permissionsFromGroup.get(i).getName().equals(permissionName)) {
					break;
				} else if (i + 1 == permissionsFromGroup.size()) {
					fail("Permission did not get added to group");
				}
			}
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			fail("Error when getting permissions: " + e.getCode());
		}

		// Deletes permission from group
		try {
			api.removeGroupPermission(group.getName(), permissionName);
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			fail("Error when removeing permission: " + e.getCode());
		}
	}

	/**
	 * Get all groups
	 *
	 * The list of usergroups.
	 *
	 * @throws ApiException if the Api call fails
	 */
	@Test
	public void groupsGetAllTest() throws ApiException {
		// Create 2 groups
		List<Permission> permissions = new ArrayList<Permission>();

		Group group1 = new Group();
		group1.setName("Putzkraft");
		group1.setPermissions(new ArrayList<Permission>());

		Group group2 = new Group();
		group2.setName("Finanzmanager");
		group2.setPermissions(permissions);

		// Add users
		try {
			api.createGroup(group1);
			api.createGroup(group2);
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			fail("Error when creating Groups!" + e.getCode());
		}

		// Get groups
		try {
			List<Object> groups = api.getAllGroups(true);
			assertEquals("There should be 3 groups, but there are: " + groups.size(), 3, groups.size());
			
			LinkedTreeMap<String, Object> gp1 = (LinkedTreeMap<String, Object>) groups.get(0);
			LinkedTreeMap<String, Object> gp2 = (LinkedTreeMap<String, Object>) groups.get(1);
			LinkedTreeMap<String, Object> gp3 = (LinkedTreeMap<String, Object>) groups.get(2);
			
			if(!"ROOT".equals(gp1.get("name")) && 
					!group1.getName().equals(gp1.get("name")) &&
					!group2.getName().equals(gp1.get("name"))) {
				fail("All Groups List should contain " + gp1.get("name"));
			}
			if(!"ROOT".equals(gp2.get("name")) && 
					!group1.getName().equals(gp2.get("name")) &&
					!group2.getName().equals(gp2.get("name"))) {
				fail("All Groups List should contain " + gp2.get("name"));
			}
			if(!"ROOT".equals(gp3.get("name")) && 
					!group1.getName().equals(gp3.get("name")) &&
					!group2.getName().equals(gp3.get("name"))) {
				fail("All Groups List should contain " + gp3.get("name"));
			}
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			fail("Error when getting groups with wholedata!");
		}
		try {
			List<Object> groups = api.getAllGroups(true);
			assertEquals("There should be 3 groups, but there are: " + groups.size(), 3, groups.size());
			
			LinkedTreeMap<String, Object> gp1 = (LinkedTreeMap<String, Object>) groups.get(0);
			LinkedTreeMap<String, Object> gp2 = (LinkedTreeMap<String, Object>) groups.get(1);
			LinkedTreeMap<String, Object> gp3 = (LinkedTreeMap<String, Object>) groups.get(2);
			
			if(!"ROOT".equals(gp1.get("name")) && 
					!group1.getName().equals(gp1.get("name")) &&
					!group2.getName().equals(gp1.get("name"))) {
				fail("All Groups List should contain " + gp1.get("name"));
			}
			if(!"ROOT".equals(gp2.get("name")) && 
					!group1.getName().equals(gp2.get("name")) &&
					!group2.getName().equals(gp2.get("name"))) {
				fail("All Groups List should contain " + gp2.get("name"));
			}
			if(!"ROOT".equals(gp3.get("name")) && 
					!group1.getName().equals(gp3.get("name")) &&
					!group2.getName().equals(gp3.get("name"))) {
				fail("All Groups List should contain " + gp3.get("name"));
			}
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			fail("Error when getting groups without wholedata!");
		}

		api.removeGroup(group1.getName());
		api.removeGroup(group2.getName());
	}

	/**
	 * Remove all groups
	 *
	 * Remove all available groups. (Can not work cause admin uses ROOT)
	 *
	 * @throws ApiException if the Api call fails
	 */
	@Test
	public void groupsRemoveAllTest() throws ApiException {

		try {
			api.removeAllGroups();
			List<Object> groups = api.getAllGroups(false);
			if((groups = api.getAllGroups(false)) == null) {
				fail("Groups got removed even though ROOT is used by admin");
			}else if(groups.size() == 0) {
				fail("Groups got removed even though ROOT is used by admin");
			}
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
		}

	}

	/**
	 * Remove Root
	 *
	 * Trys to remove ROOT (Which cant be done when admin is useing it)
	 *
	 * @throws ApiException if the Api call fails
	 */
	@Test
	public void groupsRemoveRootTest() throws ApiException {
		try {
			api.removeGroup("ROOT");
			fail("Group ROOT got removed but was used");
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			assertEquals("Errorcode should be 409 which means that the group is in use!", 409, e.getCode());
		}

	}

	/**
	 * Remove groups permissions
	 *
	 * Remove all permission from a group
	 *
	 * @throws ApiException if the Api call fails
	 */
	@Test
	public void removeAllPermissionsTest() throws ApiException {
		Group group1 = new Group();
		group1.setName("Hausmeister");
		List<Permission> perms = permissionsApi.getAllPermissions();
		group1.setPermissions(perms);

		try {
			api.createGroup(group1);
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			fail("Error when creating Group!" + e.getCode());
		}

		// Remove permission
		try {
			api.removeAllPermissions(group1.getName());
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			fail("Error when removeing permissions from group" + e.getCode());
		}

		// Test if permission got removed
		try {
			List<Permission> permissionsFromGroup = api.getGroupPermissions(group1.getName());
			permissionsFromGroup = permissionsFromGroup == null ? new ArrayList<>() : permissionsFromGroup;
			assertEquals("There should be no permissions anymore but there are " + permissionsFromGroup.size(), 0,
					permissionsFromGroup.size());
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			fail("Error when getting permissions: " + e.getCode());
		}

		api.removeGroup(group1.getName());
	}

	// TODO: Test deleteAll
}
