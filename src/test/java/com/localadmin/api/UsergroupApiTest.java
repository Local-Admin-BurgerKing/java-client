/*
 * rest-api
 * An api to fetch manipulate and enter data to the Local Admin service. All Responses can be done with JSON and XML where JSON is the default. You can change the response by setting the content-type header. The downside of our XML is that we do not provide XLS for the Responses
 *
 * OpenAPI spec version: 1.1.0
 * Contact: nbrugger@student.tgm.ac.at
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.localadmin.api;

import com.localadmin.ApiException;
import com.localadmin.model.Paths1restaurantsgetresponses401contentapplication1jsonschema;
import com.localadmin.model.Permission;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsergroupApi
 */
@Ignore
public class UsergroupApiTest {

    private final UsergroupApi api = new UsergroupApi();

    /**
     * Add group permission
     *
     * Add a specific permission to a given group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addGroupPermissionTest() throws ApiException {
        String name = null;
        String name2 = null;
        api.addGroupPermission(name, name2);

        // TODO: test validations
    }
    /**
     * Create group
     *
     * Create a new user group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGroupTest() throws ApiException {
        api.createGroup();

        // TODO: test validations
    }
    /**
     * Get all groups
     *
     * The list of usergroups.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllGroupsTest() throws ApiException {
        Boolean wholeData = null;
        List<Object> response = api.getAllGroups(wholeData);

        // TODO: test validations
    }
    /**
     * Get group permissions
     *
     * Get informations about the permissions of a user group.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGroupPermissionsTest() throws ApiException {
        String name = null;
        List<Permission> response = api.getGroupPermissions(name);

        // TODO: test validations
    }
    /**
     * Remove all groups
     *
     * Remove all available groups.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeAllGroupsTest() throws ApiException {
        api.removeAllGroups();

        // TODO: test validations
    }
    /**
     * Remove group&#x27;s permissions
     *
     * Remove all permission from a group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeAllPermissionsTest() throws ApiException {
        String name = null;
        api.removeAllPermissions(name);

        // TODO: test validations
    }
    /**
     * Remove group
     *
     * Delete the specified group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeGroupTest() throws ApiException {
        String name = null;
        api.removeGroup(name);

        // TODO: test validations
    }
    /**
     * Remove specific group-permission
     *
     * Remove a specific permission from a group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeGroupPermissionTest() throws ApiException {
        String name = null;
        String perm = null;
        api.removeGroupPermission(name, perm);

        // TODO: test validations
    }
    /**
     * Rename group
     *
     * Rename a specified group.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateGroupNameTest() throws ApiException {
        String name = null;
        String name2 = null;
        api.updateGroupName(name, name2);

        // TODO: test validations
    }
}
