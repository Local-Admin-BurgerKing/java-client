/*
 * rest-api
 * An api to fetch manipulate and enter data to the Local Admin service. All Responses can be done with JSON and XML where JSON is the default. You can change the response by setting the content-type header. The downside of our XML is that we do not provide XLS for the Responses
 *
 * OpenAPI spec version: 1.1.0
 * Contact: nbrugger@student.tgm.ac.at
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.localadmin.api;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import java.sql.Date;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import com.google.gson.internal.LinkedTreeMap;
import com.localadmin.ApiClient;
import com.localadmin.ApiException;
import com.localadmin.Configuration;
import com.localadmin.auth.ApiKeyAuth;
import com.localadmin.model.Apikeywrapper;
import com.localadmin.model.DataEntry;
import com.localadmin.model.Filter2;
import com.localadmin.model.FilterWrapper;
import com.localadmin.model.FilterWrapper1;
import com.localadmin.model.Report;
import com.localadmin.model.Report1;
import com.localadmin.model.ReportWithReference;
import com.localadmin.model.Restaurant;
import com.localadmin.model.TimeFilter2;

/**
 * API tests for TablesApi
 */
public class TablesApiTest {

	private final TablesApi api = new TablesApi();
	private final RestaurantApi restaurantApi = new RestaurantApi();
	private ApiKeyAuth User_Auth;
	private String key;
	private boolean resetTableTableBefore = true; // should it clear the table for each Test so if one fails the
													// others does not fail
	private Restaurant restaurant1;
	private Restaurant restaurant2;

	@Before
	public void setup() {
		ApiClient defaultClient = Configuration.getDefaultApiClient();

		UsersApi usersApi = new UsersApi();
		try {
			Apikeywrapper wrapper = usersApi.authenticate("admin@kingrestaurants.at", "12345678");
			key = wrapper.getKey();
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			fail("Login failed from Admin");
		}

		// Configure API key authorization: User_Auth
		User_Auth = (ApiKeyAuth) defaultClient.getAuthentication("User_Auth");
		User_Auth.setApiKey(key);

		restaurant1 = new Restaurant();
		restaurant1.setNumber(0);
		restaurant1.setLocation("Hietzinger Kai 173, 1130 Wien");
		restaurant1.setName("San Giovanni");
		restaurant1.setSollvalue(0.42f);

		restaurant2 = new Restaurant();
		restaurant2.setNumber(1);
		restaurant2.setLocation("Wo Anders");
		restaurant2.setName("Gestern geritten heute mit Fritten!");
		restaurant2.setSollvalue(0.10f);

		try {
			restaurantApi.addRestaurant(restaurant1);
			restaurantApi.addRestaurant(restaurant2);
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			fail("Fail when adding Restaurants!");
		}

		if (resetTableTableBefore) {
			try {
				List<Object> restaurantIDs = restaurantApi.getAllRestaurants(false);
				for (int i = 0; i < restaurantIDs.size(); i++) {
					FilterWrapper1 filter = new FilterWrapper1();
					TimeFilter2 timeFilter = new TimeFilter2();
					timeFilter.setFrom(LocalDate.MIN);
					timeFilter.setTo(LocalDate.MAX);
					filter.setTimefilter(timeFilter);

					List<Object> reports = api.getRestaurantReports(((Double) restaurantIDs.get(i)).intValue(), filter, false);
					for (int j = 0; j < reports.size(); j++) {
						api.removeReport((Integer) restaurantIDs.get(i), (LocalDate) reports.get(i));
					}
				}
			} catch (ApiException e) {
				System.err.println(e.getResponseBody());
				fail("Fail when reseting table table! " + e.getCode());
			}
		}
	}

	@After
	public void clean() {
		try {
			restaurantApi.deleteAllRestaurants();
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			fail("Fail when deleting Restaurant!" + e.getCode());
		}
	}

	/**
	 * Add DailyReport Get DailyReport Edit DailyReport Remove DailyReport
	 *		try {
			List<DataEntry> entrysToAdd = new ArrayList<DataEntry>();
			entrysToAdd.add(new DataEntry());
			List<DataEntry> entrysGetted = api.replaceDailyReport(0, report1.getDate(), entrysToAdd, true);
			assertEquals("The entry list does not have the correct size!", 1, entrysGetted.size());
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			fail("Error when editing DailyReport!");
		}
	 * Add a new data-entry/report to the restaurants table
	 *
	 * @throws ApiException if the Api call fails
	 */
	@Test
	public void dailyReportAddGetEditRemoveTest() throws ApiException {
		Report report1 = new Report();
		report1.setData(new ArrayList<DataEntry>());
		report1.setDate(LocalDate.now());
		
		// Add DailyReport which should not work cause of missing values
		try {
			api.addDailyReport(0, report1);
			fail("Was able to add Report again even though it was in already!");
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
		}

		report1.setComment("A comment");

		// Add DailyReport
		try {
			api.addDailyReport(0, report1);
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			fail("Error when adding DailyReport");
		}

		// Add DailyReport again which should not work
		try {
			api.addDailyReport(0, report1);
			fail("Was able to add Report again even though it was in already!");
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			assertEquals("Error-Code is wrong!", 409, e.getCode());
		}

		// Get and see if it is really inside
		try {
			Report1 report = api.getRestaurantDateReport(0, report1.getDate());
			assertEquals("Report Date is wrong!", report1.getDate(), report.getDate());
			assertEquals("Report Data is wrong!", report1.getData(), report.getData());
			assertEquals("Report Comment is wrong!", report1.getComment(), report.getComment());
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			fail("Error when getting DailyReport!");
		}

		// Edit Report
		try {
			List<DataEntry> entrysToAdd = new ArrayList<DataEntry>();
			entrysToAdd.add(new DataEntry().column("c1").value(5));
			List<DataEntry> entrysGetted = api.replaceDailyReport(0, report1.getDate(), entrysToAdd, true);
			assertEquals("The entry list does not have the correct size!", 1, entrysGetted.size());
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			fail("Error when editing DailyReport!");
		}

		// Remove
		try {
			api.removeReport(0, report1.getDate());
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			fail("Error when removing DailyReport!");
		}
	}

	/**
	 * Get Reports Get Date Rports
	 *
	 * Retrieve all entries from all restaurants Retrieve all entries from all
	 * restaurants on a specific date
	 *
	 * @throws ApiException if the Api call fails
	 */
	@Test
	public void reportsGetAllGetAtDateTest() throws ApiException {
		Report report1 = new Report();
		report1.setData(new ArrayList<DataEntry>());
		report1.setDate(LocalDate.now());
		report1.setComment("A comment");

		Report report2 = new Report();
		List<DataEntry> entrys = new ArrayList<DataEntry>();
		DataEntry entry1 = new DataEntry();
		entry1.setColumn("c1");
		entry1.setValue(-4);
		entrys.add(entry1);
		report2.setData(entrys);
		report2.setDate(LocalDate.of(2019, 11, 30));
		report2.setComment("Another comment");

		// Add DailyReports
		try {
			api.addDailyReport(0, report1);
			api.addDailyReport(1, report2);
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			fail("Error when adding Reports!");
		}

		TimeFilter2 timeFilter1 = new TimeFilter2();
		timeFilter1.setFrom(LocalDate.MIN);
		timeFilter1.setTo(LocalDate.MAX);

		FilterWrapper filter1 = new FilterWrapper();
		filter1.setTimefilter(timeFilter1);
		FilterWrapper1 filter3 = new FilterWrapper1();
		filter3.setTimefilter(timeFilter1);

		TimeFilter2 timeFilter2 = new TimeFilter2();
		timeFilter2.setFrom(LocalDate.of(2019, 11, 10));
		timeFilter2.setTo(LocalDate.of(2019, 11, 20));

		FilterWrapper filter2 = new FilterWrapper();
		filter2.setTimefilter(timeFilter2);
		FilterWrapper1 filter4 = new FilterWrapper1();
		filter2.setTimefilter(timeFilter2);

		// Get All Reports by Filter with wholedata
		try {
			List<Object> reports = api.getAllReports(filter1, true);
			assertEquals("The size is not correct!", 2, reports.size());
			
			LinkedTreeMap report_0 = (LinkedTreeMap) ((List<Object>) ((LinkedTreeMap<String, Object>) reports.get(0)).get("reports")).get(0);
			LinkedTreeMap report_1 = (LinkedTreeMap) ((List<Object>) ((LinkedTreeMap<String, Object>) reports.get(1)).get("reports")).get(0);
			
			assertEquals("Reports Date is wrong at 0", report1.getDate().toString(), report_0.get("date"));
//			assertEquals("Reports Data is wrong at 0", report1.getData(), report_0.get("data"));
			assertEquals("Reports Comment is wrong at 0", report1.getComment(), report_0.get("comment"));

			assertEquals("Reports Date is wrong at 1", report2.getDate().toString(), report_1.get("date"));
//			assertEquals("Reports Data is wrong at 1", report2.getData(), ((Report) reports.get(1)).getData());
			assertEquals("Reports Comment is wrong at 1", report2.getComment(), report_1.get("comment"));
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			fail("Error when getting all Reports! (Could be that the filter is not correctly handled too) with wholedata" + e.getCode());
		}

		// Get All Reports by Filter without wholedata
		try {
			List<Object> reports = api.getAllReports(filter1, false);
			
			assertEquals("The size is not correct!", 2, reports.size());
			// doesnt make sense, cause the expected response is just a restaurant id, not report dates.
//			assertEquals("Reports Date is wrong at 0", report1.getDate().toString(), reports.get(0));
//			assertEquals("Reports Date is wrong at 1", report2.getDate().toString(), reports.get(1));
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			fail("Error when getting all Reports! (Could be that the filter is not correctly handled too) with wholedata");
		}

		// Get All Reports by a Filter where only one should return with wholedata
//		try {
//			List<Object> reports = api.getAllReports(filter2, true);
//			assertEquals("The size is not correct!", 1, reports);
//
//			LinkedTreeMap report_0 = (LinkedTreeMap) ((List<Object>) ((LinkedTreeMap<String, Object>) reports.get(0)).get("reports")).get(0);;
//			
//			assertEquals("Reports Date is wrong at 0", report1.getDate(), (LocalDate) report_0.get("date"));
//			assertEquals("Reports Data is wrong at 0", report1.getData(), report_0.get("data"));
//			assertEquals("Reports Comment is wrong at 0", report1.getComment(), report_0.get("comment"));
//		} catch (ApiException e) {
//			System.err.println(e.getResponseBody());
//			fail("Error when getting all Reports! (Could be that the filter is not correctly handled too)  with wholedata");
//		}
//
//		// Get All Reports by Filter and Restaurant with wholedata
//		try {
//			List<Object> reports = api.getRestaurantReports(0, filter3, true);
//			assertEquals("The size is not correct!", 1, reports.size());
//
//			assertEquals("Reports Date is wrong at 0", report1.getDate(), ((LinkedTreeMap) reports.get(0)));
//			assertEquals("Reports Data is wrong at 0", report1.getData(), ((Report) reports.get(0)).getData());
//			assertEquals("Reports Comment is wrong at 0", report1.getComment(), ((Report) reports.get(0)).getComment());
//		} catch (ApiException e) {
//			System.err.println(e.getResponseBody());
//			fail("Error when getting all Reports from one Restaurant! (Could be that the filter is not correctly handled too)");
//		}
//
//		// Get All Reports by Filter and Restaurant without wholedata
//		try {
//			List<Object> reports = api.getRestaurantReports(0, filter4, false);
//			assertEquals("The size is not correct!", 0, reports.size());
//		} catch (ApiException e) {
//			System.err.println(e.getResponseBody());
//			fail("Error when getting all Reports from one Restaurant! (Could be that the filter is not correctly handled too)");
//		}
//
//		// TODO
//		Filter2 filter5 = new Filter2();
//		filter5.setName("Only One");
//		filter5.setWhitelist(new ArrayList<String>());
//
//		// Get All Reports by Filter and Restaurant with wholedata
//		try {
//			List<ReportWithReference> reports = api.getDateReports(report1.getDate(), filter5, true);
//			assertEquals("The size is not correct!", 0, reports.size());
//		} catch (ApiException e) {
//			System.err.println(e.getResponseBody());
//			fail("Error when getting all Reports from one Restaurant! (Could be that the filter is not correctly handled too)");
//		}
//
//		// Get All Reports by Filter and Restaurant without wholedata
//		try {
//			List<ReportWithReference> reports = api.getDateReports(report1.getDate(), filter5, false);
//			assertEquals("The size is not correct!", 0, reports.size());
//		} catch (ApiException e) {
//			System.err.println(e.getResponseBody());
//			fail("Error when getting all Reports from one Restaurant! (Could be that the filter is not correctly handled too)");
//		}

		// Get DataEntry at specific date from specific restaurant
		try {
			DataEntry entry = api.getRestaurantDateColumn(1, report2.getDate(), entry1.getColumn());
			assertEquals("DataEntry name is wrong", entry1.getColumn(), entry.getColumn());
			assertEquals("DataEntry value is wrong", entry1.getValue(), entry.getValue());
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			fail("Error when getting DataEntry");
		}

		// Remove
		try {
			api.removeReport(1, report2.getDate());
			api.removeReport(0, report1.getDate());
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			fail("Error when removing DailyReport!");
		}
	}

	/**
	 * Edit daily report
	 *
	 * Update the value of the given column, on the given day, in a specfied
	 * restaurant
	 *
	 * @throws ApiException if the Api call fails
	 */
	@Test
	public void updateReportColumnTest() throws ApiException {
		Report report1 = new Report();
		List<DataEntry> entrys = new ArrayList<DataEntry>();
		DataEntry entry1 = new DataEntry();
		entry1.setColumn("c1");
		entry1.setValue(-4);
		report1.setData(entrys);
		report1.setDate(LocalDate.of(2019, 11, 18));
		report1.setComment("Another comment");
		entrys.add(entry1);
		
		// Add DailyReports
		try {
			api.addDailyReport(0, report1);
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			fail("Error when adding Report!");
		}

		// Update DailyReport
		try {
			api.updateReportColumn(0, report1.getDate(), "c1", 2);
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			fail("Error when updating Column in Report!");
		}

		// Get Column
		try {
			DataEntry entry = api.getRestaurantDateColumn(0, report1.getDate(), entry1.getColumn());
			assertEquals("DataEntry name is wrong", entry1.getColumn(), entry.getColumn());
			assertEquals("DataEntry value did not get updated", 2, entry.getValue().intValue());
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			fail("Error when getting DataEntry"); 
		}

		// Remove
		try {
			api.removeReport(0, report1.getDate());
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			fail("Error when removing DailyReport!");
		}

	}

	/**
	 * Not Found Tests
	 *
	 * @throws ApiException if the Api call fails
	 */
	@Test
	public void tablesNotFoundTest() throws ApiException {
		Report report1 = new Report();
		List<DataEntry> entrys = new ArrayList<DataEntry>();
		DataEntry entry1 = new DataEntry();
		entry1.setColumn("c1");
		entry1.setValue(-4);
		report1.setData(entrys);
		report1.setDate(LocalDate.of(2019, 10, 15));
		report1.setComment("Another comment");

		TimeFilter2 timeFilter1 = new TimeFilter2();
		timeFilter1.setFrom(LocalDate.MIN);
		timeFilter1.setTo(LocalDate.MAX);

		FilterWrapper1 filter1 = new FilterWrapper1();
		filter1.setTimefilter(timeFilter1);

		// Add DailyReports
		try {
			api.addDailyReport(0, report1);
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			fail("Error when adding Report!");
		}
		try {
			// report-value was set to null => 500 expected because of missing, required, param.
			api.addDailyReport(14, report1);
			fail("There should be a 404 error when Report gets added to a non existing Restaurant!");
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			assertEquals("Error-Code should be 404", 404, e.getCode());
//			assertEquals("Our Error-Code should be 541", 541, e.getCode());
		}

		try {
			api.getAllReports(null, false);
//			fail("There should be an error when no filter gets deliverd!");
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			System.out.println(e.getCode());
		}

		try {
			api.getDateReports(LocalDate.of(1970, 1, 1), null, false);
			fail("There should be a 404 error when there is no Report on the specified date!");
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			assertEquals("Error-Code should be 404", 404, e.getCode());
//			assertEquals("Our Error-Code should be 240", 240, e.getCode());
		}
		
		try {
			api.getRestaurantDateColumn(14, report1.getDate(), "c1");
			fail("There should be a 404 error when Report is getted from a non existing Restaurant!");
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			assertEquals("Error-Code should be 404", 404, e.getCode());
//			assertEquals("Our Error-Code should be 541", 541, e.getCode());
		}
		try {
			api.getRestaurantDateColumn(0, LocalDate.of(1970,01,01), "c1");
			fail("There should be a 404 error when there is no Report on the specified date!");
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			assertEquals("Error-Code should be 404", 404, e.getCode());
//			assertEquals("Our Error-Code should be 240", 240, e.getCode());
		}
		try {
			api.getRestaurantDateColumn(0, report1.getDate(), "c2");
			fail("There should be a 404 error when there is not a DataEntry with the specified name in the Report on the specified date!");
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			assertEquals("Error-Code should be 404", 404, e.getCode());
//			assertEquals("Our Error-Code should be 340", 340, e.getCode());
		}

		try {
			api.getRestaurantDateReport(13, report1.getDate());
			fail("There should be a 404 error when Report is getted from a non existing Restaurant!");
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			assertEquals("Error-Code should be 404", 404, e.getCode());
//			assertEquals("Our Error-Code should be 541", 541, e.getCode());
		}
		try {
			api.getRestaurantDateReport(0, LocalDate.of(1970,1,1));
			fail("There should be a 404 error when there is no Report on the specified date!");
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			assertEquals("Error-Code should be 404", 404, e.getCode());
//			assertEquals("Our Error-Code should be 240", 240, e.getCode());
		}

		try {
			api.getRestaurantReports(10, filter1, true);
			fail("There should be a 404 error when Report is getted from a non existing Restaurant!");
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			assertEquals("Error-Code should be 404", 404, e.getCode());
//			assertEquals("Our Error-Code should be 541", 541, e.getCode());
		}

		try {
			api.removeReport(10, report1.getDate());
			fail("There should be a 404 error when Report gets removed from a non existing Restaurant!");
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			assertEquals("Error-Code should be 404", 404, e.getCode());
//			assertEquals("Our Error-Code should be 541", 541, e.getCode());
		}
		try {
			api.removeReport(0, LocalDate.of(1970,1,1));
			fail("There should be a 404 error when there is no Report on the specified date!");
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			assertEquals("Error-Code should be 404", 404, e.getCode());
//			assertEquals("Our Error-Code should be 240", 240, e.getCode());
		}

		try {
			api.replaceDailyReport(10, report1.getDate(), new ArrayList<DataEntry>(), false);
			fail("There should be a 404 error when Report gets added to a non existing Restaurant!");
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			assertEquals("Error-Code should be 404", 404, e.getCode());
//			assertEquals("Our Error-Code should be 541", 541, e.getCode());
		}
		try {
			api.replaceDailyReport(0, LocalDate.of(2019,1,1), new ArrayList<DataEntry>(), false);
			fail("There should be a 404 error when there is no Report on the specified date!");
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			assertEquals("Error-Code should be 404", 404, e.getCode());
//			assertEquals("Our Error-Code should be 240", 240, e.getCode());
		}
		try {
			api.replaceDailyReport(0, report1.getDate(), null, false);
			fail("There should be an error when no Entrys gets deliverd!");
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			System.out.println(e.getCode());
		}

		try {
			api.updateReportColumn(10, report1.getDate(), entry1.getColumn(), 5);
			fail("There should be a 404 error when Report gets added to a non existing Restaurant!");
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			assertEquals("Error-Code should be 404", 404, e.getCode());
//			assertEquals("Our Error-Code should be 541", 541, e.getCode());
		}
		try {
			api.updateReportColumn(0, LocalDate.of(1970,1,1), entry1.getColumn(), 5);
			fail("There should be a 404 error when there is no Report on the specified date!");
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			assertEquals("Error-Code should be 404", 404, e.getCode());
//			assertEquals("Our Error-Code should be 240", 240, e.getCode());
		}
//		try {
//			api.updateReportColumn(0, report1.getDate(), "c2", 5);
//			fail("There should be a 404 error when there is no DataEntry with the specified name in the Report on the specified date!");
//		} catch (ApiException e) {
//			System.err.println(e.getResponseBody());
//			assertEquals("Error-Code should be 404", 404, e.getCode());
////			assertEquals("Our Error-Code should be 340", 340, e.getCode());
//		}
		try {
			api.updateReportColumn(0, report1.getDate(), entry1.getColumn(), null);
			fail("There should be an error when no Value gets deliverd!");
		} catch (ApiException e) {
			System.err.println(e.getResponseBody());
			System.out.println(e.getCode());
		}

	}

	public void missingTest() throws ApiException {
		fail("Missing methods like dAll");

	}
}
