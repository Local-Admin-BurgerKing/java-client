/*
 * rest-api
 * An api to fetch manipulate and enter data to the Local Admin service. All Responses can be done with JSON and XML where JSON is the default. You can change the response by setting the content-type header. The downside of our XML is that we do not provide XLS for the Responses
 *
 * OpenAPI spec version: 1.1.0
 * Contact: nbrugger@student.tgm.ac.at
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.localadmin.api;

import com.localadmin.ApiException;
import com.localadmin.model.DataEntry;
import com.localadmin.model.FilterWrapper;
import java.time.LocalDate;
import com.localadmin.model.Paths1restaurantsgetresponses401contentapplication1jsonschema;
import com.localadmin.model.Paths1tables17Brestaurant7D1report17Bdate7Dpatchresponses206contentapplication1jsonschemaitems;
import com.localadmin.model.Paths1tables17Brestaurant7D1reportsgetresponses200contentapplication1jsonschemaitemsoneOf0items;
import com.localadmin.model.ReportWithReference;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TablesApi
 */
@Ignore
public class TablesApiTest {

    private final TablesApi api = new TablesApi();

    /**
     * Add daily report
     *
     * Add a new data-entry/report to the restaurants table
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addDailyReportTest() throws ApiException {
        Integer restaurant = null;
        api.addDailyReport(restaurant);

        // TODO: test validations
    }
    /**
     * Get reports
     *
     * Retrieve all entries from all restaurants
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllReportsTest() throws ApiException {
        FilterWrapper body = null;
        Boolean wholeData = null;
        List<Object> response = api.getAllReports(body, wholeData);

        // TODO: test validations
    }
    /**
     * Get all daily reports
     *
     * Retrieve all reports of a specific day from every restaurants
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDateReportsTest() throws ApiException {
        LocalDate date = null;
        Boolean wholeData = null;
        List<ReportWithReference> response = api.getDateReports(date, wholeData);

        // TODO: test validations
    }
    /**
     * Get daily report column
     *
     * Get the value for the specified column, on the specified day, in the specified restaurant
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRestaurantDateColumnTest() throws ApiException {
        Integer restaurant = null;
        LocalDate date = null;
        String column = null;
        Paths1tables17Brestaurant7D1report17Bdate7Dpatchresponses206contentapplication1jsonschemaitems response = api.getRestaurantDateColumn(restaurant, date, column);

        // TODO: test validations
    }
    /**
     * Get daily report
     *
     * Get the report on the given day of the specified restaurant
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRestaurantDateReportTest() throws ApiException {
        Integer restaurant = null;
        LocalDate date = null;
        Paths1tables17Brestaurant7D1reportsgetresponses200contentapplication1jsonschemaitemsoneOf0items response = api.getRestaurantDateReport(restaurant, date);

        // TODO: test validations
    }
    /**
     * Get restaurant&#x27;s reports
     *
     * Get all entries from a specific restaurant
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRestaurantReportsTest() throws ApiException {
        Integer restaurant = null;
        Boolean wholeData = null;
        List<Object> response = api.getRestaurantReports(restaurant, wholeData);

        // TODO: test validations
    }
    /**
     * Remove daily report
     *
     * Remove the data entry / report on the given day
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeReportTest() throws ApiException {
        Integer restaurant = null;
        LocalDate date = null;
        api.removeReport(restaurant, date);

        // TODO: test validations
    }
    /**
     * Replace daily report
     *
     * Update the report on the given day, of the given restaurant
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceDailyReportTest() throws ApiException {
        Integer restaurant = null;
        LocalDate date = null;
        List<Paths1tables17Brestaurant7D1report17Bdate7Dpatchresponses206contentapplication1jsonschemaitems> body = null;
        Boolean _return = null;
        List<DataEntry> response = api.replaceDailyReport(restaurant, date, body, _return);

        // TODO: test validations
    }
    /**
     * Edit daily report
     *
     * Update the value of the given column, on the given day, in a specfied restaurant
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateReportColumnTest() throws ApiException {
        Integer restaurant = null;
        LocalDate date = null;
        String column = null;
        Integer value = null;
        api.updateReportColumn(restaurant, date, column, value);

        // TODO: test validations
    }
}
