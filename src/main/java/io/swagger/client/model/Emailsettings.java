/*
 * rest-api
 * An api to fetch manipulate and enter data to the Local Admin service. All Responses can be done with JSON and XML where JSON is the default. You can change the response by setting the content-type header. The downside of our XML is that we do not provide XLS for the Responses
 *
 * OpenAPI spec version: 1.1.0
 * Contact: nbrugger@student.tgm.ac.at
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Settings for the automated Email sender
 */
@Schema(description = "Settings for the automated Email sender")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-11-20T15:33:44.001Z[GMT]")
public class Emailsettings {
  @SerializedName("subject")
  private String subject = null;

  @SerializedName("message")
  private String message = null;

  @SerializedName("filter1")
  private String filter1 = null;

  @SerializedName("filter2")
  private String filter2 = null;

  @SerializedName("sendingTime")
  private Integer sendingTime = 4;

  @SerializedName("sent")
  private Boolean sent = true;

  public Emailsettings subject(String subject) {
    this.subject = subject;
    return this;
  }

   /**
   * The subject of the mail
   * @return subject
  **/
  @Schema(required = true, description = "The subject of the mail")
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }

  public Emailsettings message(String message) {
    this.message = message;
    return this;
  }

   /**
   * The message to be sent with the email
   * @return message
  **/
  @Schema(required = true, description = "The message to be sent with the email")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  public Emailsettings filter1(String filter1) {
    this.filter1 = filter1;
    return this;
  }

   /**
   * The seccond filter for the sent report
   * @return filter1
  **/
  @Schema(required = true, description = "The seccond filter for the sent report")
  public String getFilter1() {
    return filter1;
  }

  public void setFilter1(String filter1) {
    this.filter1 = filter1;
  }

  public Emailsettings filter2(String filter2) {
    this.filter2 = filter2;
    return this;
  }

   /**
   * The first filter for the sent report
   * @return filter2
  **/
  @Schema(required = true, description = "The first filter for the sent report")
  public String getFilter2() {
    return filter2;
  }

  public void setFilter2(String filter2) {
    this.filter2 = filter2;
  }

  public Emailsettings sendingTime(Integer sendingTime) {
    this.sendingTime = sendingTime;
    return this;
  }

   /**
   * The hour of the day (0-24) at which the email should be sent
   * minimum: 1
   * maximum: 24
   * @return sendingTime
  **/
  @Schema(required = true, description = "The hour of the day (0-24) at which the email should be sent")
  public Integer getSendingTime() {
    return sendingTime;
  }

  public void setSendingTime(Integer sendingTime) {
    this.sendingTime = sendingTime;
  }

  public Emailsettings sent(Boolean sent) {
    this.sent = sent;
    return this;
  }

   /**
   * True if the email was sent allready today
   * @return sent
  **/
  @Schema(required = true, description = "True if the email was sent allready today")
  public Boolean isSent() {
    return sent;
  }

  public void setSent(Boolean sent) {
    this.sent = sent;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Emailsettings emailsettings = (Emailsettings) o;
    return Objects.equals(this.subject, emailsettings.subject) &&
        Objects.equals(this.message, emailsettings.message) &&
        Objects.equals(this.filter1, emailsettings.filter1) &&
        Objects.equals(this.filter2, emailsettings.filter2) &&
        Objects.equals(this.sendingTime, emailsettings.sendingTime) &&
        Objects.equals(this.sent, emailsettings.sent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(subject, message, filter1, filter2, sendingTime, sent);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Emailsettings {\n");
    
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    filter1: ").append(toIndentedString(filter1)).append("\n");
    sb.append("    filter2: ").append(toIndentedString(filter2)).append("\n");
    sb.append("    sendingTime: ").append(toIndentedString(sendingTime)).append("\n");
    sb.append("    sent: ").append(toIndentedString(sent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
