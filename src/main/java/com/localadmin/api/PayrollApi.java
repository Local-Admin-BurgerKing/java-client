/*
 * rest-api
 * An api to fetch manipulate and enter data to the Local Admin service. All Responses can be done with JSON and XML where JSON is the default. You can change the response by setting the content-type header. The downside of our XML is that we do not provide XLS for the Responses
 *
 * OpenAPI spec version: 1.1.0
 * Contact: nbrugger@student.tgm.ac.at
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.localadmin.api;

import com.localadmin.ApiCallback;
import com.localadmin.ApiClient;
import com.localadmin.ApiException;
import com.localadmin.ApiResponse;
import com.localadmin.Configuration;
import com.localadmin.Pair;
import com.localadmin.ProgressRequestBody;
import com.localadmin.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.localadmin.model.ErrorResponse;
import java.time.LocalDate;
import com.localadmin.model.SalaryChange;
import com.localadmin.model.SalaryChange1;
import com.localadmin.model.SalaryInformation;
import com.localadmin.model.SalaryLevel;
import com.localadmin.model.TimeFilter;
import com.localadmin.model.TimeFilter1;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PayrollApi {
    private ApiClient apiClient;

    public PayrollApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PayrollApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addSalaryChange
     * @param name Name of the salary level (required)
     * @param restaurant The ID of the restaurants (required)
     * @param body The change to save (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addSalaryChangeCall(String name, Integer restaurant, SalaryChange1 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/salary-level/{name}/payroll/{restaurant}/changes"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "restaurant" + "\\}", apiClient.escapeString(restaurant.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "User_Auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addSalaryChangeValidateBeforeCall(String name, Integer restaurant, SalaryChange1 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling addSalaryChange(Async)");
        }
        // verify the required parameter 'restaurant' is set
        if (restaurant == null) {
            throw new ApiException("Missing the required parameter 'restaurant' when calling addSalaryChange(Async)");
        }
        
        com.squareup.okhttp.Call call = addSalaryChangeCall(name, restaurant, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add Salary Level Change
     * Records a salary level Change
     * @param name Name of the salary level (required)
     * @param restaurant The ID of the restaurants (required)
     * @param body The change to save (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addSalaryChange(String name, Integer restaurant, SalaryChange1 body) throws ApiException {
        addSalaryChangeWithHttpInfo(name, restaurant, body);
    }

    /**
     * Add Salary Level Change
     * Records a salary level Change
     * @param name Name of the salary level (required)
     * @param restaurant The ID of the restaurants (required)
     * @param body The change to save (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addSalaryChangeWithHttpInfo(String name, Integer restaurant, SalaryChange1 body) throws ApiException {
        com.squareup.okhttp.Call call = addSalaryChangeValidateBeforeCall(name, restaurant, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add Salary Level Change (asynchronously)
     * Records a salary level Change
     * @param name Name of the salary level (required)
     * @param restaurant The ID of the restaurants (required)
     * @param body The change to save (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addSalaryChangeAsync(String name, Integer restaurant, SalaryChange1 body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addSalaryChangeValidateBeforeCall(name, restaurant, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for addSalaryLevel
     * @param name The name of the new salaray level (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addSalaryLevelCall(String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/salary-levels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "User_Auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addSalaryLevelValidateBeforeCall(String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling addSalaryLevel(Async)");
        }
        
        com.squareup.okhttp.Call call = addSalaryLevelCall(name, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add Salary Level
     * Adds a new Salary level
     * @param name The name of the new salaray level (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addSalaryLevel(String name) throws ApiException {
        addSalaryLevelWithHttpInfo(name);
    }

    /**
     * Add Salary Level
     * Adds a new Salary level
     * @param name The name of the new salaray level (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addSalaryLevelWithHttpInfo(String name) throws ApiException {
        com.squareup.okhttp.Call call = addSalaryLevelValidateBeforeCall(name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add Salary Level (asynchronously)
     * Adds a new Salary level
     * @param name The name of the new salaray level (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addSalaryLevelAsync(String name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addSalaryLevelValidateBeforeCall(name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deletePayroll
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePayrollCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/salary-levels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "User_Auth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePayrollValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = deletePayrollCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Payroll
     * Deletes the whole payroll
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deletePayroll() throws ApiException {
        deletePayrollWithHttpInfo();
    }

    /**
     * Delete Payroll
     * Deletes the whole payroll
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deletePayrollWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = deletePayrollValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete Payroll (asynchronously)
     * Deletes the whole payroll
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePayrollAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePayrollValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteRestaurantChanges
     * @param restaurant The id of the restaurants (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteRestaurantChangesCall(Integer restaurant, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/payroll/{restaurant}/changes"
            .replaceAll("\\{" + "restaurant" + "\\}", apiClient.escapeString(restaurant.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "User_Auth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteRestaurantChangesValidateBeforeCall(Integer restaurant, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'restaurant' is set
        if (restaurant == null) {
            throw new ApiException("Missing the required parameter 'restaurant' when calling deleteRestaurantChanges(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteRestaurantChangesCall(restaurant, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Restaurant Changes
     * Delete all changes for this restaurant
     * @param restaurant The id of the restaurants (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteRestaurantChanges(Integer restaurant) throws ApiException {
        deleteRestaurantChangesWithHttpInfo(restaurant);
    }

    /**
     * Delete Restaurant Changes
     * Delete all changes for this restaurant
     * @param restaurant The id of the restaurants (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteRestaurantChangesWithHttpInfo(Integer restaurant) throws ApiException {
        com.squareup.okhttp.Call call = deleteRestaurantChangesValidateBeforeCall(restaurant, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete Restaurant Changes (asynchronously)
     * Delete all changes for this restaurant
     * @param restaurant The id of the restaurants (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteRestaurantChangesAsync(Integer restaurant, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteRestaurantChangesValidateBeforeCall(restaurant, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for editChange
     * @param name The name of the salary level (required)
     * @param restaurant The Id of the restaurant (required)
     * @param date The date of the change (required)
     * @param newValue The value of the change (unit: &#x60;cents&#x60;) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call editChangeCall(String name, Integer restaurant, LocalDate date, Integer newValue, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/salary-level/{name}/payroll/{restaurant}/change/{date}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "restaurant" + "\\}", apiClient.escapeString(restaurant.toString()))
            .replaceAll("\\{" + "date" + "\\}", apiClient.escapeString(date.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (newValue != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("new-value", newValue));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "User_Auth" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call editChangeValidateBeforeCall(String name, Integer restaurant, LocalDate date, Integer newValue, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling editChange(Async)");
        }
        // verify the required parameter 'restaurant' is set
        if (restaurant == null) {
            throw new ApiException("Missing the required parameter 'restaurant' when calling editChange(Async)");
        }
        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling editChange(Async)");
        }
        // verify the required parameter 'newValue' is set
        if (newValue == null) {
            throw new ApiException("Missing the required parameter 'newValue' when calling editChange(Async)");
        }
        
        com.squareup.okhttp.Call call = editChangeCall(name, restaurant, date, newValue, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Edit Change Value
     * Edit the change value
     * @param name The name of the salary level (required)
     * @param restaurant The Id of the restaurant (required)
     * @param date The date of the change (required)
     * @param newValue The value of the change (unit: &#x60;cents&#x60;) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void editChange(String name, Integer restaurant, LocalDate date, Integer newValue) throws ApiException {
        editChangeWithHttpInfo(name, restaurant, date, newValue);
    }

    /**
     * Edit Change Value
     * Edit the change value
     * @param name The name of the salary level (required)
     * @param restaurant The Id of the restaurant (required)
     * @param date The date of the change (required)
     * @param newValue The value of the change (unit: &#x60;cents&#x60;) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> editChangeWithHttpInfo(String name, Integer restaurant, LocalDate date, Integer newValue) throws ApiException {
        com.squareup.okhttp.Call call = editChangeValidateBeforeCall(name, restaurant, date, newValue, null, null);
        return apiClient.execute(call);
    }

    /**
     * Edit Change Value (asynchronously)
     * Edit the change value
     * @param name The name of the salary level (required)
     * @param restaurant The Id of the restaurant (required)
     * @param date The date of the change (required)
     * @param newValue The value of the change (unit: &#x60;cents&#x60;) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call editChangeAsync(String name, Integer restaurant, LocalDate date, Integer newValue, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = editChangeValidateBeforeCall(name, restaurant, date, newValue, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getChangesByLevelAndDate
     * @param salaryLevel The name of the salary level (required)
     * @param changeDate The date of the change or the date to get the column for (required)
     * @param includeEmpty if true all restaurants are returned instead of only the one with changes on this date.  &gt; The value for these restaurants will be the last value (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getChangesByLevelAndDateCall(String salaryLevel, LocalDate changeDate, Boolean includeEmpty, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/salary-level/{salary-level}/changes/{change-date}"
            .replaceAll("\\{" + "salary-level" + "\\}", apiClient.escapeString(salaryLevel.toString()))
            .replaceAll("\\{" + "change-date" + "\\}", apiClient.escapeString(changeDate.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (includeEmpty != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("include-empty", includeEmpty));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "User_Auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChangesByLevelAndDateValidateBeforeCall(String salaryLevel, LocalDate changeDate, Boolean includeEmpty, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'salaryLevel' is set
        if (salaryLevel == null) {
            throw new ApiException("Missing the required parameter 'salaryLevel' when calling getChangesByLevelAndDate(Async)");
        }
        // verify the required parameter 'changeDate' is set
        if (changeDate == null) {
            throw new ApiException("Missing the required parameter 'changeDate' when calling getChangesByLevelAndDate(Async)");
        }
        
        com.squareup.okhttp.Call call = getChangesByLevelAndDateCall(salaryLevel, changeDate, includeEmpty, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Changes For Date
     * The changes for all restaurants on this date
     * @param salaryLevel The name of the salary level (required)
     * @param changeDate The date of the change or the date to get the column for (required)
     * @param includeEmpty if true all restaurants are returned instead of only the one with changes on this date.  &gt; The value for these restaurants will be the last value (optional)
     * @return List&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<List<Object>> getChangesByLevelAndDate(String salaryLevel, LocalDate changeDate, Boolean includeEmpty) throws ApiException {
        ApiResponse<List<List<Object>>> resp = getChangesByLevelAndDateWithHttpInfo(salaryLevel, changeDate, includeEmpty);
        return resp.getData();
    }

    /**
     * Get Changes For Date
     * The changes for all restaurants on this date
     * @param salaryLevel The name of the salary level (required)
     * @param changeDate The date of the change or the date to get the column for (required)
     * @param includeEmpty if true all restaurants are returned instead of only the one with changes on this date.  &gt; The value for these restaurants will be the last value (optional)
     * @return ApiResponse&lt;List&lt;List&lt;Object&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<List<Object>>> getChangesByLevelAndDateWithHttpInfo(String salaryLevel, LocalDate changeDate, Boolean includeEmpty) throws ApiException {
        com.squareup.okhttp.Call call = getChangesByLevelAndDateValidateBeforeCall(salaryLevel, changeDate, includeEmpty, null, null);
        Type localVarReturnType = new TypeToken<List<List<Object>>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Changes For Date (asynchronously)
     * The changes for all restaurants on this date
     * @param salaryLevel The name of the salary level (required)
     * @param changeDate The date of the change or the date to get the column for (required)
     * @param includeEmpty if true all restaurants are returned instead of only the one with changes on this date.  &gt; The value for these restaurants will be the last value (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChangesByLevelAndDateAsync(String salaryLevel, LocalDate changeDate, Boolean includeEmpty, final ApiCallback<List<List<Object>>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChangesByLevelAndDateValidateBeforeCall(salaryLevel, changeDate, includeEmpty, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<List<Object>>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLatestChange
     * @param name The name of the salary level to fetch (required)
     * @param restaurant The ID of the restaurant (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLatestChangeCall(String name, Integer restaurant, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/salary-level/{name}/payroll/{restaurant}/change/latest"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "restaurant" + "\\}", apiClient.escapeString(restaurant.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "User_Auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLatestChangeValidateBeforeCall(String name, Integer restaurant, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getLatestChange(Async)");
        }
        // verify the required parameter 'restaurant' is set
        if (restaurant == null) {
            throw new ApiException("Missing the required parameter 'restaurant' when calling getLatestChange(Async)");
        }
        
        com.squareup.okhttp.Call call = getLatestChangeCall(name, restaurant, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Latest Salary Change
     * get the latest column
     * @param name The name of the salary level to fetch (required)
     * @param restaurant The ID of the restaurant (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object getLatestChange(String name, Integer restaurant) throws ApiException {
        ApiResponse<Object> resp = getLatestChangeWithHttpInfo(name, restaurant);
        return resp.getData();
    }

    /**
     * Get Latest Salary Change
     * get the latest column
     * @param name The name of the salary level to fetch (required)
     * @param restaurant The ID of the restaurant (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> getLatestChangeWithHttpInfo(String name, Integer restaurant) throws ApiException {
        com.squareup.okhttp.Call call = getLatestChangeValidateBeforeCall(name, restaurant, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Latest Salary Change (asynchronously)
     * get the latest column
     * @param name The name of the salary level to fetch (required)
     * @param restaurant The ID of the restaurant (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLatestChangeAsync(String name, Integer restaurant, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLatestChangeValidateBeforeCall(name, restaurant, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPayroll
     * @param name Name of the salary level (required)
     * @param restaurant The ID of the restaurants (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPayrollCall(String name, Integer restaurant, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/salary-level/{name}/payroll/{restaurant}/changes"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "restaurant" + "\\}", apiClient.escapeString(restaurant.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "User_Auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPayrollValidateBeforeCall(String name, Integer restaurant, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPayroll(Async)");
        }
        // verify the required parameter 'restaurant' is set
        if (restaurant == null) {
            throw new ApiException("Missing the required parameter 'restaurant' when calling getPayroll(Async)");
        }
        
        com.squareup.okhttp.Call call = getPayrollCall(name, restaurant, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Payroll
     * Returns all salary level changes at this salary level and resaurant
     * @param name Name of the salary level (required)
     * @param restaurant The ID of the restaurants (required)
     * @return List&lt;SalaryChange&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SalaryChange> getPayroll(String name, Integer restaurant) throws ApiException {
        ApiResponse<List<SalaryChange>> resp = getPayrollWithHttpInfo(name, restaurant);
        return resp.getData();
    }

    /**
     * Get Payroll
     * Returns all salary level changes at this salary level and resaurant
     * @param name Name of the salary level (required)
     * @param restaurant The ID of the restaurants (required)
     * @return ApiResponse&lt;List&lt;SalaryChange&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SalaryChange>> getPayrollWithHttpInfo(String name, Integer restaurant) throws ApiException {
        com.squareup.okhttp.Call call = getPayrollValidateBeforeCall(name, restaurant, null, null);
        Type localVarReturnType = new TypeToken<List<SalaryChange>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Payroll (asynchronously)
     * Returns all salary level changes at this salary level and resaurant
     * @param name Name of the salary level (required)
     * @param restaurant The ID of the restaurants (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPayrollAsync(String name, Integer restaurant, final ApiCallback<List<SalaryChange>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPayrollValidateBeforeCall(name, restaurant, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SalaryChange>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPayrollInformation
     * @param name The name of the salary level to get the informations of (required)
     * @param restaurant the ID of the restaurant (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPayrollInformationCall(String name, Integer restaurant, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/salary-level/{name}/payroll/{restaurant}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "restaurant" + "\\}", apiClient.escapeString(restaurant.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "User_Auth" };
        return apiClient.buildCall(localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPayrollInformationValidateBeforeCall(String name, Integer restaurant, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPayrollInformation(Async)");
        }
        // verify the required parameter 'restaurant' is set
        if (restaurant == null) {
            throw new ApiException("Missing the required parameter 'restaurant' when calling getPayrollInformation(Async)");
        }
        
        com.squareup.okhttp.Call call = getPayrollInformationCall(name, restaurant, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Payroll Information
     * Get some usefull information about the payroll of this restaurant
     * @param name The name of the salary level to get the informations of (required)
     * @param restaurant the ID of the restaurant (required)
     * @return SalaryInformation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SalaryInformation getPayrollInformation(String name, Integer restaurant) throws ApiException {
        ApiResponse<SalaryInformation> resp = getPayrollInformationWithHttpInfo(name, restaurant);
        return resp.getData();
    }

    /**
     * Payroll Information
     * Get some usefull information about the payroll of this restaurant
     * @param name The name of the salary level to get the informations of (required)
     * @param restaurant the ID of the restaurant (required)
     * @return ApiResponse&lt;SalaryInformation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SalaryInformation> getPayrollInformationWithHttpInfo(String name, Integer restaurant) throws ApiException {
        com.squareup.okhttp.Call call = getPayrollInformationValidateBeforeCall(name, restaurant, null, null);
        Type localVarReturnType = new TypeToken<SalaryInformation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Payroll Information (asynchronously)
     * Get some usefull information about the payroll of this restaurant
     * @param name The name of the salary level to get the informations of (required)
     * @param restaurant the ID of the restaurant (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPayrollInformationAsync(String name, Integer restaurant, final ApiCallback<SalaryInformation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPayrollInformationValidateBeforeCall(name, restaurant, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SalaryInformation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRestaurantChangesAtDate
     * @param restaurant The ID of the restaurant to get the change from (required)
     * @param date The date at which the change was done (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRestaurantChangesAtDateCall(LocalDate restaurant, LocalDate date, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/payroll/{restaurant}/changes/{date}"
            .replaceAll("\\{" + "restaurant" + "\\}", apiClient.escapeString(restaurant.toString()))
            .replaceAll("\\{" + "date" + "\\}", apiClient.escapeString(date.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "User_Auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRestaurantChangesAtDateValidateBeforeCall(LocalDate restaurant, LocalDate date, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'restaurant' is set
        if (restaurant == null) {
            throw new ApiException("Missing the required parameter 'restaurant' when calling getRestaurantChangesAtDate(Async)");
        }
        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling getRestaurantChangesAtDate(Async)");
        }
        
        com.squareup.okhttp.Call call = getRestaurantChangesAtDateCall(restaurant, date, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Changes For Restaurant At Date
     * All salary changes at a certain date for a restaurant 
     * @param restaurant The ID of the restaurant to get the change from (required)
     * @param date The date at which the change was done (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Object> getRestaurantChangesAtDate(LocalDate restaurant, LocalDate date) throws ApiException {
        ApiResponse<List<Object>> resp = getRestaurantChangesAtDateWithHttpInfo(restaurant, date);
        return resp.getData();
    }

    /**
     * Get Changes For Restaurant At Date
     * All salary changes at a certain date for a restaurant 
     * @param restaurant The ID of the restaurant to get the change from (required)
     * @param date The date at which the change was done (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Object>> getRestaurantChangesAtDateWithHttpInfo(LocalDate restaurant, LocalDate date) throws ApiException {
        com.squareup.okhttp.Call call = getRestaurantChangesAtDateValidateBeforeCall(restaurant, date, null, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Changes For Restaurant At Date (asynchronously)
     * All salary changes at a certain date for a restaurant 
     * @param restaurant The ID of the restaurant to get the change from (required)
     * @param date The date at which the change was done (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRestaurantChangesAtDateAsync(LocalDate restaurant, LocalDate date, final ApiCallback<List<Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRestaurantChangesAtDateValidateBeforeCall(restaurant, date, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRestaurantChanges_
     * @param restaurant The id of the restaurants (required)
     * @param body A filter to only obtain changes at a certain time frame (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRestaurantChanges_Call(Integer restaurant, TimeFilter body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/payroll/{restaurant}/changes"
            .replaceAll("\\{" + "restaurant" + "\\}", apiClient.escapeString(restaurant.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "User_Auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRestaurantChanges_ValidateBeforeCall(Integer restaurant, TimeFilter body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'restaurant' is set
        if (restaurant == null) {
            throw new ApiException("Missing the required parameter 'restaurant' when calling getRestaurantChanges_(Async)");
        }
        
        com.squareup.okhttp.Call call = getRestaurantChanges_Call(restaurant, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Changes For Restaurant
     * Get all changes for the restaurant 
     * @param restaurant The id of the restaurants (required)
     * @param body A filter to only obtain changes at a certain time frame (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Object> getRestaurantChanges_(Integer restaurant, TimeFilter body) throws ApiException {
        ApiResponse<List<Object>> resp = getRestaurantChanges_WithHttpInfo(restaurant, body);
        return resp.getData();
    }

    /**
     * Get Changes For Restaurant
     * Get all changes for the restaurant 
     * @param restaurant The id of the restaurants (required)
     * @param body A filter to only obtain changes at a certain time frame (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Object>> getRestaurantChanges_WithHttpInfo(Integer restaurant, TimeFilter body) throws ApiException {
        com.squareup.okhttp.Call call = getRestaurantChanges_ValidateBeforeCall(restaurant, body, null, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Changes For Restaurant (asynchronously)
     * Get all changes for the restaurant 
     * @param restaurant The id of the restaurants (required)
     * @param body A filter to only obtain changes at a certain time frame (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRestaurantChanges_Async(Integer restaurant, TimeFilter body, final ApiCallback<List<Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRestaurantChanges_ValidateBeforeCall(restaurant, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSalaryChange
     * @param name The name of the salary level (required)
     * @param restaurant The Id of the restaurant (required)
     * @param date The date of the change (required)
     * @param actualUse If *true* it returns the column used to calculate with at this day.  ### Example  15.4 -&gt; 2300  12.6 -&gt; 2400  if *false* you can only request 15.4 and 12.6  if *true* you can request every date after 15.4 and you will get 2300 for every date after 15.4 and 2400 for every date after 12.6  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSalaryChangeCall(String name, Integer restaurant, LocalDate date, Boolean actualUse, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/salary-level/{name}/payroll/{restaurant}/change/{date}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "restaurant" + "\\}", apiClient.escapeString(restaurant.toString()))
            .replaceAll("\\{" + "date" + "\\}", apiClient.escapeString(date.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (actualUse != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("actual-use", actualUse));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "User_Auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSalaryChangeValidateBeforeCall(String name, Integer restaurant, LocalDate date, Boolean actualUse, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSalaryChange(Async)");
        }
        // verify the required parameter 'restaurant' is set
        if (restaurant == null) {
            throw new ApiException("Missing the required parameter 'restaurant' when calling getSalaryChange(Async)");
        }
        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling getSalaryChange(Async)");
        }
        
        com.squareup.okhttp.Call call = getSalaryChangeCall(name, restaurant, date, actualUse, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Salary Level Change
     * Get the salary change of a restaurant on a certain date
     * @param name The name of the salary level (required)
     * @param restaurant The Id of the restaurant (required)
     * @param date The date of the change (required)
     * @param actualUse If *true* it returns the column used to calculate with at this day.  ### Example  15.4 -&gt; 2300  12.6 -&gt; 2400  if *false* you can only request 15.4 and 12.6  if *true* you can request every date after 15.4 and you will get 2300 for every date after 15.4 and 2400 for every date after 12.6  (optional)
     * @return SalaryChange
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SalaryChange getSalaryChange(String name, Integer restaurant, LocalDate date, Boolean actualUse) throws ApiException {
        ApiResponse<SalaryChange> resp = getSalaryChangeWithHttpInfo(name, restaurant, date, actualUse);
        return resp.getData();
    }

    /**
     * Get Salary Level Change
     * Get the salary change of a restaurant on a certain date
     * @param name The name of the salary level (required)
     * @param restaurant The Id of the restaurant (required)
     * @param date The date of the change (required)
     * @param actualUse If *true* it returns the column used to calculate with at this day.  ### Example  15.4 -&gt; 2300  12.6 -&gt; 2400  if *false* you can only request 15.4 and 12.6  if *true* you can request every date after 15.4 and you will get 2300 for every date after 15.4 and 2400 for every date after 12.6  (optional)
     * @return ApiResponse&lt;SalaryChange&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SalaryChange> getSalaryChangeWithHttpInfo(String name, Integer restaurant, LocalDate date, Boolean actualUse) throws ApiException {
        com.squareup.okhttp.Call call = getSalaryChangeValidateBeforeCall(name, restaurant, date, actualUse, null, null);
        Type localVarReturnType = new TypeToken<SalaryChange>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Salary Level Change (asynchronously)
     * Get the salary change of a restaurant on a certain date
     * @param name The name of the salary level (required)
     * @param restaurant The Id of the restaurant (required)
     * @param date The date of the change (required)
     * @param actualUse If *true* it returns the column used to calculate with at this day.  ### Example  15.4 -&gt; 2300  12.6 -&gt; 2400  if *false* you can only request 15.4 and 12.6  if *true* you can request every date after 15.4 and you will get 2300 for every date after 15.4 and 2400 for every date after 12.6  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSalaryChangeAsync(String name, Integer restaurant, LocalDate date, Boolean actualUse, final ApiCallback<SalaryChange> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSalaryChangeValidateBeforeCall(name, restaurant, date, actualUse, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SalaryChange>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSalaryLevel
     * @param salaryLevel The name of the salary level (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSalaryLevelCall(String salaryLevel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/salary-level/{salary-level}"
            .replaceAll("\\{" + "salary-level" + "\\}", apiClient.escapeString(salaryLevel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "User_Auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSalaryLevelValidateBeforeCall(String salaryLevel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'salaryLevel' is set
        if (salaryLevel == null) {
            throw new ApiException("Missing the required parameter 'salaryLevel' when calling getSalaryLevel(Async)");
        }
        
        com.squareup.okhttp.Call call = getSalaryLevelCall(salaryLevel, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Salary Level
     * Returns a specific salary level  &gt; the &#x60;whole_data&#x60; flag is missing  as salary level has no *primitive* attributes other than **name**
     * @param salaryLevel The name of the salary level (required)
     * @return SalaryLevel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SalaryLevel getSalaryLevel(String salaryLevel) throws ApiException {
        ApiResponse<SalaryLevel> resp = getSalaryLevelWithHttpInfo(salaryLevel);
        return resp.getData();
    }

    /**
     * Get Salary Level
     * Returns a specific salary level  &gt; the &#x60;whole_data&#x60; flag is missing  as salary level has no *primitive* attributes other than **name**
     * @param salaryLevel The name of the salary level (required)
     * @return ApiResponse&lt;SalaryLevel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SalaryLevel> getSalaryLevelWithHttpInfo(String salaryLevel) throws ApiException {
        com.squareup.okhttp.Call call = getSalaryLevelValidateBeforeCall(salaryLevel, null, null);
        Type localVarReturnType = new TypeToken<SalaryLevel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Salary Level (asynchronously)
     * Returns a specific salary level  &gt; the &#x60;whole_data&#x60; flag is missing  as salary level has no *primitive* attributes other than **name**
     * @param salaryLevel The name of the salary level (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSalaryLevelAsync(String salaryLevel, final ApiCallback<SalaryLevel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSalaryLevelValidateBeforeCall(salaryLevel, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SalaryLevel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSalaryLevelChanges
     * @param salaryLevel The name of the salary level (required)
     * @param body A filter to only obtain certain results (optional)
     * @param wholeData If true data will be returned instead of references (or dates in this case) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSalaryLevelChangesCall(String salaryLevel, TimeFilter1 body, Boolean wholeData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/salary-level/{salary-level}/changes"
            .replaceAll("\\{" + "salary-level" + "\\}", apiClient.escapeString(salaryLevel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (wholeData != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("whole_data", wholeData));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "User_Auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSalaryLevelChangesValidateBeforeCall(String salaryLevel, TimeFilter1 body, Boolean wholeData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'salaryLevel' is set
        if (salaryLevel == null) {
            throw new ApiException("Missing the required parameter 'salaryLevel' when calling getSalaryLevelChanges(Async)");
        }
        
        com.squareup.okhttp.Call call = getSalaryLevelChangesCall(salaryLevel, body, wholeData, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Salary Level Changes
     * All changes of the salary level **across all restaurants!**
     * @param salaryLevel The name of the salary level (required)
     * @param body A filter to only obtain certain results (optional)
     * @param wholeData If true data will be returned instead of references (or dates in this case) (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Object> getSalaryLevelChanges(String salaryLevel, TimeFilter1 body, Boolean wholeData) throws ApiException {
        ApiResponse<List<Object>> resp = getSalaryLevelChangesWithHttpInfo(salaryLevel, body, wholeData);
        return resp.getData();
    }

    /**
     * Get Salary Level Changes
     * All changes of the salary level **across all restaurants!**
     * @param salaryLevel The name of the salary level (required)
     * @param body A filter to only obtain certain results (optional)
     * @param wholeData If true data will be returned instead of references (or dates in this case) (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Object>> getSalaryLevelChangesWithHttpInfo(String salaryLevel, TimeFilter1 body, Boolean wholeData) throws ApiException {
        com.squareup.okhttp.Call call = getSalaryLevelChangesValidateBeforeCall(salaryLevel, body, wholeData, null, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Salary Level Changes (asynchronously)
     * All changes of the salary level **across all restaurants!**
     * @param salaryLevel The name of the salary level (required)
     * @param body A filter to only obtain certain results (optional)
     * @param wholeData If true data will be returned instead of references (or dates in this case) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSalaryLevelChangesAsync(String salaryLevel, TimeFilter1 body, Boolean wholeData, final ApiCallback<List<Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSalaryLevelChangesValidateBeforeCall(salaryLevel, body, wholeData, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSalaryLevels
     * @param wholeData if true you will get all the data instead of only reference names (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSalaryLevelsCall(Boolean wholeData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/salary-levels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (wholeData != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("whole_data", wholeData));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "User_Auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSalaryLevelsValidateBeforeCall(Boolean wholeData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getSalaryLevelsCall(wholeData, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * GET salary levels
     * lists all salary levels
     * @param wholeData if true you will get all the data instead of only reference names (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Object> getSalaryLevels(Boolean wholeData) throws ApiException {
        ApiResponse<List<Object>> resp = getSalaryLevelsWithHttpInfo(wholeData);
        return resp.getData();
    }

    /**
     * GET salary levels
     * lists all salary levels
     * @param wholeData if true you will get all the data instead of only reference names (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Object>> getSalaryLevelsWithHttpInfo(Boolean wholeData) throws ApiException {
        com.squareup.okhttp.Call call = getSalaryLevelsValidateBeforeCall(wholeData, null, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * GET salary levels (asynchronously)
     * lists all salary levels
     * @param wholeData if true you will get all the data instead of only reference names (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSalaryLevelsAsync(Boolean wholeData, final ApiCallback<List<Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSalaryLevelsValidateBeforeCall(wholeData, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeChange
     * @param name The name of the salary level (required)
     * @param restaurant The Id of the restaurant (required)
     * @param date The date of the change (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeChangeCall(String name, Integer restaurant, LocalDate date, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/salary-level/{name}/payroll/{restaurant}/change/{date}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "restaurant" + "\\}", apiClient.escapeString(restaurant.toString()))
            .replaceAll("\\{" + "date" + "\\}", apiClient.escapeString(date.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "User_Auth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeChangeValidateBeforeCall(String name, Integer restaurant, LocalDate date, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling removeChange(Async)");
        }
        // verify the required parameter 'restaurant' is set
        if (restaurant == null) {
            throw new ApiException("Missing the required parameter 'restaurant' when calling removeChange(Async)");
        }
        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling removeChange(Async)");
        }
        
        com.squareup.okhttp.Call call = removeChangeCall(name, restaurant, date, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Change
     * Removes the change
     * @param name The name of the salary level (required)
     * @param restaurant The Id of the restaurant (required)
     * @param date The date of the change (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void removeChange(String name, Integer restaurant, LocalDate date) throws ApiException {
        removeChangeWithHttpInfo(name, restaurant, date);
    }

    /**
     * Delete Change
     * Removes the change
     * @param name The name of the salary level (required)
     * @param restaurant The Id of the restaurant (required)
     * @param date The date of the change (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> removeChangeWithHttpInfo(String name, Integer restaurant, LocalDate date) throws ApiException {
        com.squareup.okhttp.Call call = removeChangeValidateBeforeCall(name, restaurant, date, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete Change (asynchronously)
     * Removes the change
     * @param name The name of the salary level (required)
     * @param restaurant The Id of the restaurant (required)
     * @param date The date of the change (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeChangeAsync(String name, Integer restaurant, LocalDate date, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeChangeValidateBeforeCall(name, restaurant, date, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for removePayroll
     * @param name Name of the salary level (required)
     * @param restaurant The ID of the restaurants (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removePayrollCall(String name, Integer restaurant, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/salary-level/{name}/payroll/{restaurant}/changes"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "restaurant" + "\\}", apiClient.escapeString(restaurant.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "User_Auth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removePayrollValidateBeforeCall(String name, Integer restaurant, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling removePayroll(Async)");
        }
        // verify the required parameter 'restaurant' is set
        if (restaurant == null) {
            throw new ApiException("Missing the required parameter 'restaurant' when calling removePayroll(Async)");
        }
        
        com.squareup.okhttp.Call call = removePayrollCall(name, restaurant, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Payroll
     * Deletes all changes for this restaurant
     * @param name Name of the salary level (required)
     * @param restaurant The ID of the restaurants (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void removePayroll(String name, Integer restaurant) throws ApiException {
        removePayrollWithHttpInfo(name, restaurant);
    }

    /**
     * Delete Payroll
     * Deletes all changes for this restaurant
     * @param name Name of the salary level (required)
     * @param restaurant The ID of the restaurants (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> removePayrollWithHttpInfo(String name, Integer restaurant) throws ApiException {
        com.squareup.okhttp.Call call = removePayrollValidateBeforeCall(name, restaurant, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete Payroll (asynchronously)
     * Deletes all changes for this restaurant
     * @param name Name of the salary level (required)
     * @param restaurant The ID of the restaurants (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removePayrollAsync(String name, Integer restaurant, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removePayrollValidateBeforeCall(name, restaurant, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for removeSalaryLevel
     * @param salaryLevel The name of the salary level (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeSalaryLevelCall(String salaryLevel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/salary-level/{salary-level}"
            .replaceAll("\\{" + "salary-level" + "\\}", apiClient.escapeString(salaryLevel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "User_Auth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeSalaryLevelValidateBeforeCall(String salaryLevel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'salaryLevel' is set
        if (salaryLevel == null) {
            throw new ApiException("Missing the required parameter 'salaryLevel' when calling removeSalaryLevel(Async)");
        }
        
        com.squareup.okhttp.Call call = removeSalaryLevelCall(salaryLevel, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Salary Level
     * Removes a salary level and all of its changes
     * @param salaryLevel The name of the salary level (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void removeSalaryLevel(String salaryLevel) throws ApiException {
        removeSalaryLevelWithHttpInfo(salaryLevel);
    }

    /**
     * Delete Salary Level
     * Removes a salary level and all of its changes
     * @param salaryLevel The name of the salary level (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> removeSalaryLevelWithHttpInfo(String salaryLevel) throws ApiException {
        com.squareup.okhttp.Call call = removeSalaryLevelValidateBeforeCall(salaryLevel, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete Salary Level (asynchronously)
     * Removes a salary level and all of its changes
     * @param salaryLevel The name of the salary level (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeSalaryLevelAsync(String salaryLevel, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeSalaryLevelValidateBeforeCall(salaryLevel, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for renameSalaryLevel
     * @param salaryLevel The name of the salary level (required)
     * @param newName The new name for the salary level (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call renameSalaryLevelCall(String salaryLevel, String newName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/salary-level/{salary-level}"
            .replaceAll("\\{" + "salary-level" + "\\}", apiClient.escapeString(salaryLevel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (newName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("new-name", newName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "User_Auth" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call renameSalaryLevelValidateBeforeCall(String salaryLevel, String newName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'salaryLevel' is set
        if (salaryLevel == null) {
            throw new ApiException("Missing the required parameter 'salaryLevel' when calling renameSalaryLevel(Async)");
        }
        // verify the required parameter 'newName' is set
        if (newName == null) {
            throw new ApiException("Missing the required parameter 'newName' when calling renameSalaryLevel(Async)");
        }
        
        com.squareup.okhttp.Call call = renameSalaryLevelCall(salaryLevel, newName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Rename Salary Level
     * Edit Salary level name  Also changes all references.
     * @param salaryLevel The name of the salary level (required)
     * @param newName The new name for the salary level (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void renameSalaryLevel(String salaryLevel, String newName) throws ApiException {
        renameSalaryLevelWithHttpInfo(salaryLevel, newName);
    }

    /**
     * Rename Salary Level
     * Edit Salary level name  Also changes all references.
     * @param salaryLevel The name of the salary level (required)
     * @param newName The new name for the salary level (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> renameSalaryLevelWithHttpInfo(String salaryLevel, String newName) throws ApiException {
        com.squareup.okhttp.Call call = renameSalaryLevelValidateBeforeCall(salaryLevel, newName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Rename Salary Level (asynchronously)
     * Edit Salary level name  Also changes all references.
     * @param salaryLevel The name of the salary level (required)
     * @param newName The new name for the salary level (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call renameSalaryLevelAsync(String salaryLevel, String newName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = renameSalaryLevelValidateBeforeCall(salaryLevel, newName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for resetSalaryLevel
     * @param salaryLevel The name of the salary level (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call resetSalaryLevelCall(String salaryLevel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/salary-level/{salary-level}/changes"
            .replaceAll("\\{" + "salary-level" + "\\}", apiClient.escapeString(salaryLevel.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "User_Auth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call resetSalaryLevelValidateBeforeCall(String salaryLevel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'salaryLevel' is set
        if (salaryLevel == null) {
            throw new ApiException("Missing the required parameter 'salaryLevel' when calling resetSalaryLevel(Async)");
        }
        
        com.squareup.okhttp.Call call = resetSalaryLevelCall(salaryLevel, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Reset Salary Level
     * Removes all changes (*from all restaurants*) from the salary level
     * @param salaryLevel The name of the salary level (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void resetSalaryLevel(String salaryLevel) throws ApiException {
        resetSalaryLevelWithHttpInfo(salaryLevel);
    }

    /**
     * Reset Salary Level
     * Removes all changes (*from all restaurants*) from the salary level
     * @param salaryLevel The name of the salary level (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> resetSalaryLevelWithHttpInfo(String salaryLevel) throws ApiException {
        com.squareup.okhttp.Call call = resetSalaryLevelValidateBeforeCall(salaryLevel, null, null);
        return apiClient.execute(call);
    }

    /**
     * Reset Salary Level (asynchronously)
     * Removes all changes (*from all restaurants*) from the salary level
     * @param salaryLevel The name of the salary level (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call resetSalaryLevelAsync(String salaryLevel, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = resetSalaryLevelValidateBeforeCall(salaryLevel, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
