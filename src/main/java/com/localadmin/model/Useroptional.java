/*
 * rest-api
 * An api to fetch manipulate and enter data to the Local Admin service. All Responses can be done with JSON and XML where JSON is the default. You can change the response by setting the content-type header. The downside of our XML is that we do not provide XLS for the Responses
 *
 * OpenAPI spec version: 1.1.0
 * Contact: nbrugger@student.tgm.ac.at
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.localadmin.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.io.Serializable;
/**
 * A user with his data
 */
@Schema(description = "A user with his data")

public class Useroptional implements Serializable{
  private static final long serialVersionUID = 1L;
  @SerializedName("name")
  private String name = null;

  @SerializedName("email")
  private String email = null;

  @SerializedName("password")
  private String password = null;

  @SerializedName("group")
  private String group = null;

  public Useroptional name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the User
   * @return name
  **/
  @Schema(description = "Name of the User")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Useroptional email(String email) {
    this.email = email;
    return this;
  }

   /**
   * EMail address of the user.
   * @return email
  **/
  @Schema(description = "EMail address of the user.")
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public Useroptional password(String password) {
    this.password = password;
    return this;
  }

   /**
   * password for the user account
   * @return password
  **/
  @Schema(description = "password for the user account")
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public Useroptional group(String group) {
    this.group = group;
    return this;
  }

   /**
   * Name of the group the user is in
   * @return group
  **/
  @Schema(description = "Name of the group the user is in")
  public String getGroup() {
    return group;
  }

  public void setGroup(String group) {
    this.group = group;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Useroptional useroptional = (Useroptional) o;
    return Objects.equals(this.name, useroptional.name) &&
        Objects.equals(this.email, useroptional.email) &&
        Objects.equals(this.password, useroptional.password) &&
        Objects.equals(this.group, useroptional.group);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, email, password, group);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Useroptional {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
