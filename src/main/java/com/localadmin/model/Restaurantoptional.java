/*
 * rest-api
 * An api to fetch manipulate and enter data to the Local Admin service. All Responses can be done with JSON and XML where JSON is the default. You can change the response by setting the content-type header. The downside of our XML is that we do not provide XLS for the Responses
 *
 * OpenAPI spec version: 1.1.0
 * Contact: nbrugger@student.tgm.ac.at
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.localadmin.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.io.Serializable;
/**
 * A restaurant with all its information
 */
@Schema(description = "A restaurant with all its information")

public class Restaurantoptional implements Serializable{
  private static final long serialVersionUID = 1L;
  @SerializedName("number")
  private Integer number = null;

  @SerializedName("sollvalue")
  private Float sollvalue = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("location")
  private String location = null;

  public Restaurantoptional number(Integer number) {
    this.number = number;
    return this;
  }

   /**
   * The ID of the reustaurant
   * minimum: 0
   * @return number
  **/
  @Schema(description = "The ID of the reustaurant")
  public Integer getNumber() {
    return number;
  }

  public void setNumber(Integer number) {
    this.number = number;
  }

  public Restaurantoptional sollvalue(Float sollvalue) {
    this.sollvalue = sollvalue;
    return this;
  }

   /**
   * The maximum percentage that the employe costs regarding to the netto income should not overextend
   * @return sollvalue
  **/
  @Schema(description = "The maximum percentage that the employe costs regarding to the netto income should not overextend")
  public Float getSollvalue() {
    return sollvalue;
  }

  public void setSollvalue(Float sollvalue) {
    this.sollvalue = sollvalue;
  }

  public Restaurantoptional name(String name) {
    this.name = name;
    return this;
  }

   /**
   * A human readable name for the restaurant
   * @return name
  **/
  @Schema(example = "Quick Restaurant", description = "A human readable name for the restaurant")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Restaurantoptional location(String location) {
    this.location = location;
    return this;
  }

   /**
   * A human findable location
   * @return location
  **/
  @Schema(description = "A human findable location")
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Restaurantoptional restaurantoptional = (Restaurantoptional) o;
    return Objects.equals(this.number, restaurantoptional.number) &&
        Objects.equals(this.sollvalue, restaurantoptional.sollvalue) &&
        Objects.equals(this.name, restaurantoptional.name) &&
        Objects.equals(this.location, restaurantoptional.location);
  }

  @Override
  public int hashCode() {
    return Objects.hash(number, sollvalue, name, location);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Restaurantoptional {\n");
    
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    sollvalue: ").append(toIndentedString(sollvalue)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
