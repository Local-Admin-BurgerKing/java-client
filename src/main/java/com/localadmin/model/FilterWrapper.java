/*
 * rest-api
 * An api to fetch manipulate and enter data to the Local Admin service. All Responses can be done with JSON and XML where JSON is the default. You can change the response by setting the content-type header. The downside of our XML is that we do not provide XLS for the Responses
 *
 * OpenAPI spec version: 1.1.0
 * Contact: nbrugger@student.tgm.ac.at
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.localadmin.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.localadmin.model.Filter1;
import com.localadmin.model.TimeFilter2;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.io.Serializable;
/**
 * Wrapper for the column / time filter
 */
@Schema(description = "Wrapper for the column / time filter")

public class FilterWrapper implements Serializable{
  private static final long serialVersionUID = 1L;
  @SerializedName("columnfilter")
  private Filter1 columnfilter = null;

  @SerializedName("timefilter")
  private TimeFilter2 timefilter = null;

  public FilterWrapper columnfilter(Filter1 columnfilter) {
    this.columnfilter = columnfilter;
    return this;
  }

   /**
   * Get columnfilter
   * @return columnfilter
  **/
  @Schema(description = "")
  public Filter1 getColumnfilter() {
    return columnfilter;
  }

  public void setColumnfilter(Filter1 columnfilter) {
    this.columnfilter = columnfilter;
  }

  public FilterWrapper timefilter(TimeFilter2 timefilter) {
    this.timefilter = timefilter;
    return this;
  }

   /**
   * Get timefilter
   * @return timefilter
  **/
  @Schema(description = "")
  public TimeFilter2 getTimefilter() {
    return timefilter;
  }

  public void setTimefilter(TimeFilter2 timefilter) {
    this.timefilter = timefilter;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FilterWrapper filterWrapper = (FilterWrapper) o;
    return Objects.equals(this.columnfilter, filterWrapper.columnfilter) &&
        Objects.equals(this.timefilter, filterWrapper.timefilter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(columnfilter, timefilter);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FilterWrapper {\n");
    
    sb.append("    columnfilter: ").append(toIndentedString(columnfilter)).append("\n");
    sb.append("    timefilter: ").append(toIndentedString(timefilter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
