/*
 * rest-api
 * An api to fetch manipulate and enter data to the Local Admin service. All Responses can be done with JSON and XML where JSON is the default. You can change the response by setting the content-type header. The downside of our XML is that we do not provide XLS for the Responses
 *
 * OpenAPI spec version: 1.1.0
 * Contact: nbrugger@student.tgm.ac.at
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.localadmin.api;

import com.localadmin.ApiCallback;
import com.localadmin.ApiClient;
import com.localadmin.ApiException;
import com.localadmin.ApiResponse;
import com.localadmin.Configuration;
import com.localadmin.Pair;
import com.localadmin.ProgressRequestBody;
import com.localadmin.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.localadmin.model.DataEntry;
import com.localadmin.model.FilterWrapper;
import java.time.LocalDate;
import com.localadmin.model.Paths1restaurantsgetresponses401contentapplication1jsonschema;
import com.localadmin.model.Paths1tables17Brestaurant7D1report17Bdate7Dpatchresponses206contentapplication1jsonschemaitems;
import com.localadmin.model.Paths1tables17Brestaurant7D1reportsgetresponses200contentapplication1jsonschemaitemsoneOf0items;
import com.localadmin.model.ReportWithReference;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TablesApi {
    private ApiClient apiClient;

    public TablesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TablesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addDailyReport
     * @param restaurant ID of a restaurant (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addDailyReportCall(Integer restaurant, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tables/{restaurant}/reports"
            .replaceAll("\\{" + "restaurant" + "\\}", apiClient.escapeString(restaurant.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "User_Auth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addDailyReportValidateBeforeCall(Integer restaurant, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'restaurant' is set
        if (restaurant == null) {
            throw new ApiException("Missing the required parameter 'restaurant' when calling addDailyReport(Async)");
        }
        
        com.squareup.okhttp.Call call = addDailyReportCall(restaurant, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add daily report
     * Add a new data-entry/report to the restaurants table
     * @param restaurant ID of a restaurant (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addDailyReport(Integer restaurant) throws ApiException {
        addDailyReportWithHttpInfo(restaurant);
    }

    /**
     * Add daily report
     * Add a new data-entry/report to the restaurants table
     * @param restaurant ID of a restaurant (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addDailyReportWithHttpInfo(Integer restaurant) throws ApiException {
        com.squareup.okhttp.Call call = addDailyReportValidateBeforeCall(restaurant, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add daily report (asynchronously)
     * Add a new data-entry/report to the restaurants table
     * @param restaurant ID of a restaurant (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addDailyReportAsync(Integer restaurant, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addDailyReportValidateBeforeCall(restaurant, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAllReports
     * @param body The filter can either be a column-filter or a time-filter (optional)
     * @param wholeData if true you will get all the data instead of only reference names (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllReportsCall(FilterWrapper body, Boolean wholeData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/tables";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (wholeData != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("whole_data", wholeData));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "User_Auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllReportsValidateBeforeCall(FilterWrapper body, Boolean wholeData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getAllReportsCall(body, wholeData, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get reports
     * Retrieve all entries from all restaurants
     * @param body The filter can either be a column-filter or a time-filter (optional)
     * @param wholeData if true you will get all the data instead of only reference names (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Object> getAllReports(FilterWrapper body, Boolean wholeData) throws ApiException {
        ApiResponse<List<Object>> resp = getAllReportsWithHttpInfo(body, wholeData);
        return resp.getData();
    }

    /**
     * Get reports
     * Retrieve all entries from all restaurants
     * @param body The filter can either be a column-filter or a time-filter (optional)
     * @param wholeData if true you will get all the data instead of only reference names (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Object>> getAllReportsWithHttpInfo(FilterWrapper body, Boolean wholeData) throws ApiException {
        com.squareup.okhttp.Call call = getAllReportsValidateBeforeCall(body, wholeData, null, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get reports (asynchronously)
     * Retrieve all entries from all restaurants
     * @param body The filter can either be a column-filter or a time-filter (optional)
     * @param wholeData if true you will get all the data instead of only reference names (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllReportsAsync(FilterWrapper body, Boolean wholeData, final ApiCallback<List<Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllReportsValidateBeforeCall(body, wholeData, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDateReports
     * @param date Date in the format 12.12.2001 (required)
     * @param wholeData if true you will get all the data instead of only reference names (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDateReportsCall(LocalDate date, Boolean wholeData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tables/reports/{date}"
            .replaceAll("\\{" + "date" + "\\}", apiClient.escapeString(date.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (wholeData != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("whole_data", wholeData));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "User_Auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDateReportsValidateBeforeCall(LocalDate date, Boolean wholeData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling getDateReports(Async)");
        }
        
        com.squareup.okhttp.Call call = getDateReportsCall(date, wholeData, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all daily reports
     * Retrieve all reports of a specific day from every restaurants
     * @param date Date in the format 12.12.2001 (required)
     * @param wholeData if true you will get all the data instead of only reference names (optional)
     * @return List&lt;ReportWithReference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ReportWithReference> getDateReports(LocalDate date, Boolean wholeData) throws ApiException {
        ApiResponse<List<ReportWithReference>> resp = getDateReportsWithHttpInfo(date, wholeData);
        return resp.getData();
    }

    /**
     * Get all daily reports
     * Retrieve all reports of a specific day from every restaurants
     * @param date Date in the format 12.12.2001 (required)
     * @param wholeData if true you will get all the data instead of only reference names (optional)
     * @return ApiResponse&lt;List&lt;ReportWithReference&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ReportWithReference>> getDateReportsWithHttpInfo(LocalDate date, Boolean wholeData) throws ApiException {
        com.squareup.okhttp.Call call = getDateReportsValidateBeforeCall(date, wholeData, null, null);
        Type localVarReturnType = new TypeToken<List<ReportWithReference>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all daily reports (asynchronously)
     * Retrieve all reports of a specific day from every restaurants
     * @param date Date in the format 12.12.2001 (required)
     * @param wholeData if true you will get all the data instead of only reference names (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDateReportsAsync(LocalDate date, Boolean wholeData, final ApiCallback<List<ReportWithReference>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDateReportsValidateBeforeCall(date, wholeData, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ReportWithReference>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRestaurantDateColumn
     * @param restaurant ID of a restaurant (required)
     * @param date Date in the format 12.12.2001 (required)
     * @param column Name of column, which exists in the given report (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRestaurantDateColumnCall(Integer restaurant, LocalDate date, String column, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tables/{restaurant}/report/{date}/data/{column}"
            .replaceAll("\\{" + "restaurant" + "\\}", apiClient.escapeString(restaurant.toString()))
            .replaceAll("\\{" + "date" + "\\}", apiClient.escapeString(date.toString()))
            .replaceAll("\\{" + "column" + "\\}", apiClient.escapeString(column.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "User_Auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRestaurantDateColumnValidateBeforeCall(Integer restaurant, LocalDate date, String column, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'restaurant' is set
        if (restaurant == null) {
            throw new ApiException("Missing the required parameter 'restaurant' when calling getRestaurantDateColumn(Async)");
        }
        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling getRestaurantDateColumn(Async)");
        }
        // verify the required parameter 'column' is set
        if (column == null) {
            throw new ApiException("Missing the required parameter 'column' when calling getRestaurantDateColumn(Async)");
        }
        
        com.squareup.okhttp.Call call = getRestaurantDateColumnCall(restaurant, date, column, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get daily report column
     * Get the value for the specified column, on the specified day, in the specified restaurant
     * @param restaurant ID of a restaurant (required)
     * @param date Date in the format 12.12.2001 (required)
     * @param column Name of column, which exists in the given report (required)
     * @return Paths1tables17Brestaurant7D1report17Bdate7Dpatchresponses206contentapplication1jsonschemaitems
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Paths1tables17Brestaurant7D1report17Bdate7Dpatchresponses206contentapplication1jsonschemaitems getRestaurantDateColumn(Integer restaurant, LocalDate date, String column) throws ApiException {
        ApiResponse<Paths1tables17Brestaurant7D1report17Bdate7Dpatchresponses206contentapplication1jsonschemaitems> resp = getRestaurantDateColumnWithHttpInfo(restaurant, date, column);
        return resp.getData();
    }

    /**
     * Get daily report column
     * Get the value for the specified column, on the specified day, in the specified restaurant
     * @param restaurant ID of a restaurant (required)
     * @param date Date in the format 12.12.2001 (required)
     * @param column Name of column, which exists in the given report (required)
     * @return ApiResponse&lt;Paths1tables17Brestaurant7D1report17Bdate7Dpatchresponses206contentapplication1jsonschemaitems&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Paths1tables17Brestaurant7D1report17Bdate7Dpatchresponses206contentapplication1jsonschemaitems> getRestaurantDateColumnWithHttpInfo(Integer restaurant, LocalDate date, String column) throws ApiException {
        com.squareup.okhttp.Call call = getRestaurantDateColumnValidateBeforeCall(restaurant, date, column, null, null);
        Type localVarReturnType = new TypeToken<Paths1tables17Brestaurant7D1report17Bdate7Dpatchresponses206contentapplication1jsonschemaitems>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get daily report column (asynchronously)
     * Get the value for the specified column, on the specified day, in the specified restaurant
     * @param restaurant ID of a restaurant (required)
     * @param date Date in the format 12.12.2001 (required)
     * @param column Name of column, which exists in the given report (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRestaurantDateColumnAsync(Integer restaurant, LocalDate date, String column, final ApiCallback<Paths1tables17Brestaurant7D1report17Bdate7Dpatchresponses206contentapplication1jsonschemaitems> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRestaurantDateColumnValidateBeforeCall(restaurant, date, column, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Paths1tables17Brestaurant7D1report17Bdate7Dpatchresponses206contentapplication1jsonschemaitems>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRestaurantDateReport
     * @param restaurant ID of a restaurant (required)
     * @param date Date in the format (12.12.2001) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRestaurantDateReportCall(Integer restaurant, LocalDate date, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tables/{restaurant}/report/{date}"
            .replaceAll("\\{" + "restaurant" + "\\}", apiClient.escapeString(restaurant.toString()))
            .replaceAll("\\{" + "date" + "\\}", apiClient.escapeString(date.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "User_Auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRestaurantDateReportValidateBeforeCall(Integer restaurant, LocalDate date, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'restaurant' is set
        if (restaurant == null) {
            throw new ApiException("Missing the required parameter 'restaurant' when calling getRestaurantDateReport(Async)");
        }
        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling getRestaurantDateReport(Async)");
        }
        
        com.squareup.okhttp.Call call = getRestaurantDateReportCall(restaurant, date, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get daily report
     * Get the report on the given day of the specified restaurant
     * @param restaurant ID of a restaurant (required)
     * @param date Date in the format (12.12.2001) (required)
     * @return Paths1tables17Brestaurant7D1reportsgetresponses200contentapplication1jsonschemaitemsoneOf0items
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Paths1tables17Brestaurant7D1reportsgetresponses200contentapplication1jsonschemaitemsoneOf0items getRestaurantDateReport(Integer restaurant, LocalDate date) throws ApiException {
        ApiResponse<Paths1tables17Brestaurant7D1reportsgetresponses200contentapplication1jsonschemaitemsoneOf0items> resp = getRestaurantDateReportWithHttpInfo(restaurant, date);
        return resp.getData();
    }

    /**
     * Get daily report
     * Get the report on the given day of the specified restaurant
     * @param restaurant ID of a restaurant (required)
     * @param date Date in the format (12.12.2001) (required)
     * @return ApiResponse&lt;Paths1tables17Brestaurant7D1reportsgetresponses200contentapplication1jsonschemaitemsoneOf0items&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Paths1tables17Brestaurant7D1reportsgetresponses200contentapplication1jsonschemaitemsoneOf0items> getRestaurantDateReportWithHttpInfo(Integer restaurant, LocalDate date) throws ApiException {
        com.squareup.okhttp.Call call = getRestaurantDateReportValidateBeforeCall(restaurant, date, null, null);
        Type localVarReturnType = new TypeToken<Paths1tables17Brestaurant7D1reportsgetresponses200contentapplication1jsonschemaitemsoneOf0items>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get daily report (asynchronously)
     * Get the report on the given day of the specified restaurant
     * @param restaurant ID of a restaurant (required)
     * @param date Date in the format (12.12.2001) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRestaurantDateReportAsync(Integer restaurant, LocalDate date, final ApiCallback<Paths1tables17Brestaurant7D1reportsgetresponses200contentapplication1jsonschemaitemsoneOf0items> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRestaurantDateReportValidateBeforeCall(restaurant, date, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Paths1tables17Brestaurant7D1reportsgetresponses200contentapplication1jsonschemaitemsoneOf0items>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRestaurantReports
     * @param restaurant ID of a restaurant (required)
     * @param wholeData if true you will get all the data instead of only reference names (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRestaurantReportsCall(Integer restaurant, Boolean wholeData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tables/{restaurant}/reports"
            .replaceAll("\\{" + "restaurant" + "\\}", apiClient.escapeString(restaurant.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (wholeData != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("whole_data", wholeData));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "User_Auth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRestaurantReportsValidateBeforeCall(Integer restaurant, Boolean wholeData, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'restaurant' is set
        if (restaurant == null) {
            throw new ApiException("Missing the required parameter 'restaurant' when calling getRestaurantReports(Async)");
        }
        
        com.squareup.okhttp.Call call = getRestaurantReportsCall(restaurant, wholeData, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get restaurant&#x27;s reports
     * Get all entries from a specific restaurant
     * @param restaurant ID of a restaurant (required)
     * @param wholeData if true you will get all the data instead of only reference names (optional)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Object> getRestaurantReports(Integer restaurant, Boolean wholeData) throws ApiException {
        ApiResponse<List<Object>> resp = getRestaurantReportsWithHttpInfo(restaurant, wholeData);
        return resp.getData();
    }

    /**
     * Get restaurant&#x27;s reports
     * Get all entries from a specific restaurant
     * @param restaurant ID of a restaurant (required)
     * @param wholeData if true you will get all the data instead of only reference names (optional)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Object>> getRestaurantReportsWithHttpInfo(Integer restaurant, Boolean wholeData) throws ApiException {
        com.squareup.okhttp.Call call = getRestaurantReportsValidateBeforeCall(restaurant, wholeData, null, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get restaurant&#x27;s reports (asynchronously)
     * Get all entries from a specific restaurant
     * @param restaurant ID of a restaurant (required)
     * @param wholeData if true you will get all the data instead of only reference names (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRestaurantReportsAsync(Integer restaurant, Boolean wholeData, final ApiCallback<List<Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRestaurantReportsValidateBeforeCall(restaurant, wholeData, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeReport
     * @param restaurant ID of a restaurant (required)
     * @param date Date in the format (12.12.2001) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeReportCall(Integer restaurant, LocalDate date, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tables/{restaurant}/report/{date}"
            .replaceAll("\\{" + "restaurant" + "\\}", apiClient.escapeString(restaurant.toString()))
            .replaceAll("\\{" + "date" + "\\}", apiClient.escapeString(date.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "User_Auth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeReportValidateBeforeCall(Integer restaurant, LocalDate date, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'restaurant' is set
        if (restaurant == null) {
            throw new ApiException("Missing the required parameter 'restaurant' when calling removeReport(Async)");
        }
        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling removeReport(Async)");
        }
        
        com.squareup.okhttp.Call call = removeReportCall(restaurant, date, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Remove daily report
     * Remove the data entry / report on the given day
     * @param restaurant ID of a restaurant (required)
     * @param date Date in the format (12.12.2001) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void removeReport(Integer restaurant, LocalDate date) throws ApiException {
        removeReportWithHttpInfo(restaurant, date);
    }

    /**
     * Remove daily report
     * Remove the data entry / report on the given day
     * @param restaurant ID of a restaurant (required)
     * @param date Date in the format (12.12.2001) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> removeReportWithHttpInfo(Integer restaurant, LocalDate date) throws ApiException {
        com.squareup.okhttp.Call call = removeReportValidateBeforeCall(restaurant, date, null, null);
        return apiClient.execute(call);
    }

    /**
     * Remove daily report (asynchronously)
     * Remove the data entry / report on the given day
     * @param restaurant ID of a restaurant (required)
     * @param date Date in the format (12.12.2001) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeReportAsync(Integer restaurant, LocalDate date, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeReportValidateBeforeCall(restaurant, date, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for replaceDailyReport
     * @param restaurant ID of a restaurant (required)
     * @param date Date in the format (12.12.2001) (required)
     * @param body Represents a list of columns and associated values (optional)
     * @param _return If true, the changed report will be returned (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call replaceDailyReportCall(Integer restaurant, LocalDate date, List<Paths1tables17Brestaurant7D1report17Bdate7Dpatchresponses206contentapplication1jsonschemaitems> body, Boolean _return, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/tables/{restaurant}/report/{date}"
            .replaceAll("\\{" + "restaurant" + "\\}", apiClient.escapeString(restaurant.toString()))
            .replaceAll("\\{" + "date" + "\\}", apiClient.escapeString(date.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (_return != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("return", _return));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "User_Auth" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call replaceDailyReportValidateBeforeCall(Integer restaurant, LocalDate date, List<Paths1tables17Brestaurant7D1report17Bdate7Dpatchresponses206contentapplication1jsonschemaitems> body, Boolean _return, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'restaurant' is set
        if (restaurant == null) {
            throw new ApiException("Missing the required parameter 'restaurant' when calling replaceDailyReport(Async)");
        }
        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling replaceDailyReport(Async)");
        }
        
        com.squareup.okhttp.Call call = replaceDailyReportCall(restaurant, date, body, _return, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Replace daily report
     * Update the report on the given day, of the given restaurant
     * @param restaurant ID of a restaurant (required)
     * @param date Date in the format (12.12.2001) (required)
     * @param body Represents a list of columns and associated values (optional)
     * @param _return If true, the changed report will be returned (optional)
     * @return List&lt;DataEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DataEntry> replaceDailyReport(Integer restaurant, LocalDate date, List<Paths1tables17Brestaurant7D1report17Bdate7Dpatchresponses206contentapplication1jsonschemaitems> body, Boolean _return) throws ApiException {
        ApiResponse<List<DataEntry>> resp = replaceDailyReportWithHttpInfo(restaurant, date, body, _return);
        return resp.getData();
    }

    /**
     * Replace daily report
     * Update the report on the given day, of the given restaurant
     * @param restaurant ID of a restaurant (required)
     * @param date Date in the format (12.12.2001) (required)
     * @param body Represents a list of columns and associated values (optional)
     * @param _return If true, the changed report will be returned (optional)
     * @return ApiResponse&lt;List&lt;DataEntry&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DataEntry>> replaceDailyReportWithHttpInfo(Integer restaurant, LocalDate date, List<Paths1tables17Brestaurant7D1report17Bdate7Dpatchresponses206contentapplication1jsonschemaitems> body, Boolean _return) throws ApiException {
        com.squareup.okhttp.Call call = replaceDailyReportValidateBeforeCall(restaurant, date, body, _return, null, null);
        Type localVarReturnType = new TypeToken<List<DataEntry>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Replace daily report (asynchronously)
     * Update the report on the given day, of the given restaurant
     * @param restaurant ID of a restaurant (required)
     * @param date Date in the format (12.12.2001) (required)
     * @param body Represents a list of columns and associated values (optional)
     * @param _return If true, the changed report will be returned (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call replaceDailyReportAsync(Integer restaurant, LocalDate date, List<Paths1tables17Brestaurant7D1report17Bdate7Dpatchresponses206contentapplication1jsonschemaitems> body, Boolean _return, final ApiCallback<List<DataEntry>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replaceDailyReportValidateBeforeCall(restaurant, date, body, _return, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DataEntry>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateReportColumn
     * @param restaurant ID of a restaurant (required)
     * @param date Date in the format 12.12.2001 (required)
     * @param column Name of column, which exists in the given report (required)
     * @param value New value for the given column (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateReportColumnCall(Integer restaurant, LocalDate date, String column, Integer value, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tables/{restaurant}/report/{date}/data/{column}"
            .replaceAll("\\{" + "restaurant" + "\\}", apiClient.escapeString(restaurant.toString()))
            .replaceAll("\\{" + "date" + "\\}", apiClient.escapeString(date.toString()))
            .replaceAll("\\{" + "column" + "\\}", apiClient.escapeString(column.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (value != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("value", value));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "User_Auth" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateReportColumnValidateBeforeCall(Integer restaurant, LocalDate date, String column, Integer value, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'restaurant' is set
        if (restaurant == null) {
            throw new ApiException("Missing the required parameter 'restaurant' when calling updateReportColumn(Async)");
        }
        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling updateReportColumn(Async)");
        }
        // verify the required parameter 'column' is set
        if (column == null) {
            throw new ApiException("Missing the required parameter 'column' when calling updateReportColumn(Async)");
        }
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling updateReportColumn(Async)");
        }
        
        com.squareup.okhttp.Call call = updateReportColumnCall(restaurant, date, column, value, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Edit daily report
     * Update the value of the given column, on the given day, in a specfied restaurant
     * @param restaurant ID of a restaurant (required)
     * @param date Date in the format 12.12.2001 (required)
     * @param column Name of column, which exists in the given report (required)
     * @param value New value for the given column (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void updateReportColumn(Integer restaurant, LocalDate date, String column, Integer value) throws ApiException {
        updateReportColumnWithHttpInfo(restaurant, date, column, value);
    }

    /**
     * Edit daily report
     * Update the value of the given column, on the given day, in a specfied restaurant
     * @param restaurant ID of a restaurant (required)
     * @param date Date in the format 12.12.2001 (required)
     * @param column Name of column, which exists in the given report (required)
     * @param value New value for the given column (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> updateReportColumnWithHttpInfo(Integer restaurant, LocalDate date, String column, Integer value) throws ApiException {
        com.squareup.okhttp.Call call = updateReportColumnValidateBeforeCall(restaurant, date, column, value, null, null);
        return apiClient.execute(call);
    }

    /**
     * Edit daily report (asynchronously)
     * Update the value of the given column, on the given day, in a specfied restaurant
     * @param restaurant ID of a restaurant (required)
     * @param date Date in the format 12.12.2001 (required)
     * @param column Name of column, which exists in the given report (required)
     * @param value New value for the given column (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateReportColumnAsync(Integer restaurant, LocalDate date, String column, Integer value, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateReportColumnValidateBeforeCall(restaurant, date, column, value, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
