/*
 * rest-api
 * An api to fetch manipulate and enter data to the Local Admin service. All Responses can be done with JSON and XML where JSON is the default. You can change the response by setting the content-type header. The downside of our XML is that we do not provide XLS for the Responses
 *
 * OpenAPI spec version: 1.1.0
 * Contact: nbrugger@student.tgm.ac.at
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.localadmin.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.localadmin.model.Paths1salaryLevel17Bname7D1payroll17Brestaurant7Dheadresponses200contentapplication1jsonschemapropertiesname;
import com.localadmin.model.Payroll;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;
import javax.xml.bind.annotation.*;
/**
 * A salary level and its change over time
 */
@Schema(description = "A salary level and its change over time")
@XmlRootElement(name = "SalaryLevel")
@XmlAccessorType(XmlAccessType.FIELD)

public class SalaryLevel implements Serializable{
  private static final long serialVersionUID = 1L;
  // Is a container wrapped=
  // items.name=payrolls items.baseName=payrolls items.xmlName= items.xmlNamespace=
  // items.example= items.type=Payroll
  @XmlElement(name = "payrolls")
  @SerializedName("payrolls")
  private List<Payroll> payrolls = new ArrayList<>();

  @XmlElement(name = "name")
  @SerializedName("name")
  private Paths1salaryLevel17Bname7D1payroll17Brestaurant7Dheadresponses200contentapplication1jsonschemapropertiesname name = null;

  public SalaryLevel payrolls(List<Payroll> payrolls) {
    this.payrolls = payrolls;
    return this;
  }

  public SalaryLevel addPayrollsItem(Payroll payrollsItem) {
    this.payrolls.add(payrollsItem);
    return this;
  }

   /**
   * The changes of the value over time
   * @return payrolls
  **/
  @Schema(required = true, description = "The changes of the value over time")
  public List<Payroll> getPayrolls() {
    return payrolls;
  }

  public void setPayrolls(List<Payroll> payrolls) {
    this.payrolls = payrolls;
  }

  public SalaryLevel name(Paths1salaryLevel17Bname7D1payroll17Brestaurant7Dheadresponses200contentapplication1jsonschemapropertiesname name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(required = true, description = "")
  public Paths1salaryLevel17Bname7D1payroll17Brestaurant7Dheadresponses200contentapplication1jsonschemapropertiesname getName() {
    return name;
  }

  public void setName(Paths1salaryLevel17Bname7D1payroll17Brestaurant7Dheadresponses200contentapplication1jsonschemapropertiesname name) {
    this.name = name;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SalaryLevel salaryLevel = (SalaryLevel) o;
    return Objects.equals(this.payrolls, salaryLevel.payrolls) &&
        Objects.equals(this.name, salaryLevel.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(payrolls, name);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SalaryLevel {\n");
    
    sb.append("    payrolls: ").append(toIndentedString(payrolls)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
